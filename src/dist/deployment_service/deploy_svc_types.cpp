#ifdef DSN_USE_THRIFT_SERIALIZATION
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "deploy_svc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn { namespace dist {

int _kcluster_typeValues[] = {
  cstype_kubernetes,
  cstype_docker,
  cstype_bare_medal_linux,
  cstype_bare_medal_windows,
  cstype_yarn_on_linux,
  cstype_yarn_on_windows,
  cstype_mesos_on_linux,
  cstype_mesos_on_windows
};
const char* _kcluster_typeNames[] = {
  "cstype_kubernetes",
  "cstype_docker",
  "cstype_bare_medal_linux",
  "cstype_bare_medal_windows",
  "cstype_yarn_on_linux",
  "cstype_yarn_on_windows",
  "cstype_mesos_on_linux",
  "cstype_mesos_on_windows"
};
const std::map<int, const char*> _cluster_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kcluster_typeValues, _kcluster_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kservice_statusValues[] = {
  SS_PREPARE_RESOURCE,
  SS_DEPLOYING,
  SS_RUNNING,
  SS_FAILOVER,
  SS_FAILED,
  SS_COUNT,
  SS_INVALID
};
const char* _kservice_statusNames[] = {
  "SS_PREPARE_RESOURCE",
  "SS_DEPLOYING",
  "SS_RUNNING",
  "SS_FAILOVER",
  "SS_FAILED",
  "SS_COUNT",
  "SS_INVALID"
};
const std::map<int, const char*> _service_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kservice_statusValues, _kservice_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


deploy_request::~deploy_request() throw() {
}


void deploy_request::__set_package_id(const std::string& val) {
  this->package_id = val;
}

void deploy_request::__set_package_full_path(const std::string& val) {
  this->package_full_path = val;
}

void deploy_request::__set_package_server(const  ::dsn::rpc_address& val) {
  this->package_server = val;
}

void deploy_request::__set_cluster_name(const std::string& val) {
  this->cluster_name = val;
}

void deploy_request::__set_name(const std::string& val) {
  this->name = val;
}

uint32_t deploy_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->package_id);
          this->__isset.package_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->package_full_path);
          this->__isset.package_full_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->package_server.read(iprot);
          this->__isset.package_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cluster_name);
          this->__isset.cluster_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deploy_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("deploy_request");

  xfer += oprot->writeFieldBegin("package_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->package_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("package_full_path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->package_full_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("package_server", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->package_server.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cluster_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cluster_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(deploy_request &a, deploy_request &b) {
  using ::std::swap;
  swap(a.package_id, b.package_id);
  swap(a.package_full_path, b.package_full_path);
  swap(a.package_server, b.package_server);
  swap(a.cluster_name, b.cluster_name);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

deploy_request::deploy_request(const deploy_request& other0) {
  package_id = other0.package_id;
  package_full_path = other0.package_full_path;
  package_server = other0.package_server;
  cluster_name = other0.cluster_name;
  name = other0.name;
  __isset = other0.__isset;
}
deploy_request::deploy_request( deploy_request&& other1) {
  package_id = std::move(other1.package_id);
  package_full_path = std::move(other1.package_full_path);
  package_server = std::move(other1.package_server);
  cluster_name = std::move(other1.cluster_name);
  name = std::move(other1.name);
  __isset = std::move(other1.__isset);
}
deploy_request& deploy_request::operator=(const deploy_request& other2) {
  package_id = other2.package_id;
  package_full_path = other2.package_full_path;
  package_server = other2.package_server;
  cluster_name = other2.cluster_name;
  name = other2.name;
  __isset = other2.__isset;
  return *this;
}
deploy_request& deploy_request::operator=(deploy_request&& other3) {
  package_id = std::move(other3.package_id);
  package_full_path = std::move(other3.package_full_path);
  package_server = std::move(other3.package_server);
  cluster_name = std::move(other3.cluster_name);
  name = std::move(other3.name);
  __isset = std::move(other3.__isset);
  return *this;
}
void deploy_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "deploy_request(";
  out << "package_id=" << to_string(package_id);
  out << ", " << "package_full_path=" << to_string(package_full_path);
  out << ", " << "package_server=" << to_string(package_server);
  out << ", " << "cluster_name=" << to_string(cluster_name);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


deploy_info::~deploy_info() throw() {
}


void deploy_info::__set_package_id(const std::string& val) {
  this->package_id = val;
}

void deploy_info::__set_name(const std::string& val) {
  this->name = val;
}

void deploy_info::__set_service_url(const std::string& val) {
  this->service_url = val;
}

void deploy_info::__set_error(const  ::dsn::error_code& val) {
  this->error = val;
}

void deploy_info::__set_cluster(const std::string& val) {
  this->cluster = val;
}

void deploy_info::__set_status(const service_status val) {
  this->status = val;
}

uint32_t deploy_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->package_id);
          this->__isset.package_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_url);
          this->__isset.service_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cluster);
          this->__isset.cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->status = (service_status)ecast4;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deploy_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("deploy_info");

  xfer += oprot->writeFieldBegin("package_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->package_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->service_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->cluster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(deploy_info &a, deploy_info &b) {
  using ::std::swap;
  swap(a.package_id, b.package_id);
  swap(a.name, b.name);
  swap(a.service_url, b.service_url);
  swap(a.error, b.error);
  swap(a.cluster, b.cluster);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

deploy_info::deploy_info(const deploy_info& other5) {
  package_id = other5.package_id;
  name = other5.name;
  service_url = other5.service_url;
  error = other5.error;
  cluster = other5.cluster;
  status = other5.status;
  __isset = other5.__isset;
}
deploy_info::deploy_info( deploy_info&& other6) {
  package_id = std::move(other6.package_id);
  name = std::move(other6.name);
  service_url = std::move(other6.service_url);
  error = std::move(other6.error);
  cluster = std::move(other6.cluster);
  status = std::move(other6.status);
  __isset = std::move(other6.__isset);
}
deploy_info& deploy_info::operator=(const deploy_info& other7) {
  package_id = other7.package_id;
  name = other7.name;
  service_url = other7.service_url;
  error = other7.error;
  cluster = other7.cluster;
  status = other7.status;
  __isset = other7.__isset;
  return *this;
}
deploy_info& deploy_info::operator=(deploy_info&& other8) {
  package_id = std::move(other8.package_id);
  name = std::move(other8.name);
  service_url = std::move(other8.service_url);
  error = std::move(other8.error);
  cluster = std::move(other8.cluster);
  status = std::move(other8.status);
  __isset = std::move(other8.__isset);
  return *this;
}
void deploy_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "deploy_info(";
  out << "package_id=" << to_string(package_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "service_url=" << to_string(service_url);
  out << ", " << "error=" << to_string(error);
  out << ", " << "cluster=" << to_string(cluster);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


deploy_info_list::~deploy_info_list() throw() {
}


void deploy_info_list::__set_services(const std::vector<deploy_info> & val) {
  this->services = val;
}

uint32_t deploy_info_list::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->services.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->services.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += this->services[_i13].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.services = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deploy_info_list::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("deploy_info_list");

  xfer += oprot->writeFieldBegin("services", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->services.size()));
    std::vector<deploy_info> ::const_iterator _iter14;
    for (_iter14 = this->services.begin(); _iter14 != this->services.end(); ++_iter14)
    {
      xfer += (*_iter14).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(deploy_info_list &a, deploy_info_list &b) {
  using ::std::swap;
  swap(a.services, b.services);
  swap(a.__isset, b.__isset);
}

deploy_info_list::deploy_info_list(const deploy_info_list& other15) {
  services = other15.services;
  __isset = other15.__isset;
}
deploy_info_list::deploy_info_list( deploy_info_list&& other16) {
  services = std::move(other16.services);
  __isset = std::move(other16.__isset);
}
deploy_info_list& deploy_info_list::operator=(const deploy_info_list& other17) {
  services = other17.services;
  __isset = other17.__isset;
  return *this;
}
deploy_info_list& deploy_info_list::operator=(deploy_info_list&& other18) {
  services = std::move(other18.services);
  __isset = std::move(other18.__isset);
  return *this;
}
void deploy_info_list::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "deploy_info_list(";
  out << "services=" << to_string(services);
  out << ")";
}


cluster_info::~cluster_info() throw() {
}


void cluster_info::__set_name(const std::string& val) {
  this->name = val;
}

void cluster_info::__set_type(const cluster_type val) {
  this->type = val;
}

uint32_t cluster_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->type = (cluster_type)ecast19;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t cluster_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("cluster_info");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(cluster_info &a, cluster_info &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

cluster_info::cluster_info(const cluster_info& other20) {
  name = other20.name;
  type = other20.type;
  __isset = other20.__isset;
}
cluster_info::cluster_info( cluster_info&& other21) {
  name = std::move(other21.name);
  type = std::move(other21.type);
  __isset = std::move(other21.__isset);
}
cluster_info& cluster_info::operator=(const cluster_info& other22) {
  name = other22.name;
  type = other22.type;
  __isset = other22.__isset;
  return *this;
}
cluster_info& cluster_info::operator=(cluster_info&& other23) {
  name = std::move(other23.name);
  type = std::move(other23.type);
  __isset = std::move(other23.__isset);
  return *this;
}
void cluster_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "cluster_info(";
  out << "name=" << to_string(name);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


cluster_list::~cluster_list() throw() {
}


void cluster_list::__set_clusters(const std::vector<cluster_info> & val) {
  this->clusters = val;
}

uint32_t cluster_list::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->clusters.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->clusters.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->clusters[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.clusters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t cluster_list::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("cluster_list");

  xfer += oprot->writeFieldBegin("clusters", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->clusters.size()));
    std::vector<cluster_info> ::const_iterator _iter29;
    for (_iter29 = this->clusters.begin(); _iter29 != this->clusters.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(cluster_list &a, cluster_list &b) {
  using ::std::swap;
  swap(a.clusters, b.clusters);
  swap(a.__isset, b.__isset);
}

cluster_list::cluster_list(const cluster_list& other30) {
  clusters = other30.clusters;
  __isset = other30.__isset;
}
cluster_list::cluster_list( cluster_list&& other31) {
  clusters = std::move(other31.clusters);
  __isset = std::move(other31.__isset);
}
cluster_list& cluster_list::operator=(const cluster_list& other32) {
  clusters = other32.clusters;
  __isset = other32.__isset;
  return *this;
}
cluster_list& cluster_list::operator=(cluster_list&& other33) {
  clusters = std::move(other33.clusters);
  __isset = std::move(other33.__isset);
  return *this;
}
void cluster_list::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "cluster_list(";
  out << "clusters=" << to_string(clusters);
  out << ")";
}

}} // namespace
#endif
