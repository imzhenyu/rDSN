/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef deploy_svc_TYPES_H
#define deploy_svc_TYPES_H

#include <dsn/service_api_cpp.h>
#include <dsn/dist/cluster_scheduler.h>
#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dsn { namespace dist {


extern const std::map<int, const char*> _cluster_type_VALUES_TO_NAMES;


extern const std::map<int, const char*> _service_status_VALUES_TO_NAMES;

class deploy_request;

class deploy_info;

class deploy_info_list;

class cluster_info;

class cluster_list;

typedef struct _deploy_request__isset {
  _deploy_request__isset() : package_id(false), package_full_path(false), package_server(false), cluster_name(false), name(false) {}
  bool package_id :1;
  bool package_full_path :1;
  bool package_server :1;
  bool cluster_name :1;
  bool name :1;
} _deploy_request__isset;

class deploy_request {
 public:

  deploy_request(const deploy_request&);
  deploy_request(deploy_request&&);
  deploy_request& operator=(const deploy_request&);
  deploy_request& operator=(deploy_request&&);
  deploy_request() : package_id(), package_full_path(), cluster_name(), name() {
  }

  virtual ~deploy_request() throw();
  std::string package_id;
  std::string package_full_path;
   ::dsn::rpc_address package_server;
  std::string cluster_name;
  std::string name;

  _deploy_request__isset __isset;

  void __set_package_id(const std::string& val);

  void __set_package_full_path(const std::string& val);

  void __set_package_server(const  ::dsn::rpc_address& val);

  void __set_cluster_name(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const deploy_request & rhs) const
  {
    if (!(package_id == rhs.package_id))
      return false;
    if (!(package_full_path == rhs.package_full_path))
      return false;
    if (!(package_server == rhs.package_server))
      return false;
    if (!(cluster_name == rhs.cluster_name))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const deploy_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deploy_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(deploy_request &a, deploy_request &b);

inline std::ostream& operator<<(std::ostream& out, const deploy_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _deploy_info__isset {
  _deploy_info__isset() : package_id(false), name(false), service_url(false), error(false), cluster(false), status(false) {}
  bool package_id :1;
  bool name :1;
  bool service_url :1;
  bool error :1;
  bool cluster :1;
  bool status :1;
} _deploy_info__isset;

class deploy_info {
 public:

  deploy_info(const deploy_info&);
  deploy_info(deploy_info&&);
  deploy_info& operator=(const deploy_info&);
  deploy_info& operator=(deploy_info&&);
  deploy_info() : package_id(), name(), service_url(), cluster(), status((service_status)0) {
  }

  virtual ~deploy_info() throw();
  std::string package_id;
  std::string name;
  std::string service_url;
   ::dsn::error_code error;
  std::string cluster;
  service_status status;

  _deploy_info__isset __isset;

  void __set_package_id(const std::string& val);

  void __set_name(const std::string& val);

  void __set_service_url(const std::string& val);

  void __set_error(const  ::dsn::error_code& val);

  void __set_cluster(const std::string& val);

  void __set_status(const service_status val);

  bool operator == (const deploy_info & rhs) const
  {
    if (!(package_id == rhs.package_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(service_url == rhs.service_url))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(cluster == rhs.cluster))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const deploy_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deploy_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(deploy_info &a, deploy_info &b);

inline std::ostream& operator<<(std::ostream& out, const deploy_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _deploy_info_list__isset {
  _deploy_info_list__isset() : services(false) {}
  bool services :1;
} _deploy_info_list__isset;

class deploy_info_list {
 public:

  deploy_info_list(const deploy_info_list&);
  deploy_info_list(deploy_info_list&&);
  deploy_info_list& operator=(const deploy_info_list&);
  deploy_info_list& operator=(deploy_info_list&&);
  deploy_info_list() {
  }

  virtual ~deploy_info_list() throw();
  std::vector<deploy_info>  services;

  _deploy_info_list__isset __isset;

  void __set_services(const std::vector<deploy_info> & val);

  bool operator == (const deploy_info_list & rhs) const
  {
    if (!(services == rhs.services))
      return false;
    return true;
  }
  bool operator != (const deploy_info_list &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deploy_info_list & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(deploy_info_list &a, deploy_info_list &b);

inline std::ostream& operator<<(std::ostream& out, const deploy_info_list& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _cluster_info__isset {
  _cluster_info__isset() : name(false), type(false) {}
  bool name :1;
  bool type :1;
} _cluster_info__isset;

class cluster_info {
 public:

  cluster_info(const cluster_info&);
  cluster_info(cluster_info&&);
  cluster_info& operator=(const cluster_info&);
  cluster_info& operator=(cluster_info&&);
  cluster_info() : name(), type((cluster_type)0) {
  }

  virtual ~cluster_info() throw();
  std::string name;
  cluster_type type;

  _cluster_info__isset __isset;

  void __set_name(const std::string& val);

  void __set_type(const cluster_type val);

  bool operator == (const cluster_info & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const cluster_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cluster_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(cluster_info &a, cluster_info &b);

inline std::ostream& operator<<(std::ostream& out, const cluster_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _cluster_list__isset {
  _cluster_list__isset() : clusters(false) {}
  bool clusters :1;
} _cluster_list__isset;

class cluster_list {
 public:

  cluster_list(const cluster_list&);
  cluster_list(cluster_list&&);
  cluster_list& operator=(const cluster_list&);
  cluster_list& operator=(cluster_list&&);
  cluster_list() {
  }

  virtual ~cluster_list() throw();
  std::vector<cluster_info>  clusters;

  _cluster_list__isset __isset;

  void __set_clusters(const std::vector<cluster_info> & val);

  bool operator == (const cluster_list & rhs) const
  {
    if (!(clusters == rhs.clusters))
      return false;
    return true;
  }
  bool operator != (const cluster_list &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cluster_list & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(cluster_list &a, cluster_list &b);

inline std::ostream& operator<<(std::ostream& out, const cluster_list& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
