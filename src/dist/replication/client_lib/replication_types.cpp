#ifdef DSN_USE_THRIFT_SERIALIZATION
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <dsn/dist/replication/replication_types.h>

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn { namespace replication {

int _kpartition_statusValues[] = {
  PS_INVALID,
  PS_INACTIVE,
  PS_ERROR,
  PS_PRIMARY,
  PS_SECONDARY,
  PS_POTENTIAL_SECONDARY
};
const char* _kpartition_statusNames[] = {
  "PS_INVALID",
  "PS_INACTIVE",
  "PS_ERROR",
  "PS_PRIMARY",
  "PS_SECONDARY",
  "PS_POTENTIAL_SECONDARY"
};
const std::map<int, const char*> _partition_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kpartition_statusValues, _kpartition_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kread_semanticValues[] = {
  ReadInvalid,
  ReadLastUpdate,
  ReadOutdated,
  ReadSnapshot
};
const char* _kread_semanticNames[] = {
  "ReadInvalid",
  "ReadLastUpdate",
  "ReadOutdated",
  "ReadSnapshot"
};
const std::map<int, const char*> _read_semantic_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kread_semanticValues, _kread_semanticNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _klearn_typeValues[] = {
  LT_INVALID,
  LT_CACHE,
  LT_APP,
  LT_LOG
};
const char* _klearn_typeNames[] = {
  "LT_INVALID",
  "LT_CACHE",
  "LT_APP",
  "LT_LOG"
};
const std::map<int, const char*> _learn_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _klearn_typeValues, _klearn_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _klearner_statusValues[] = {
  LearningInvalid,
  LearningWithoutPrepare,
  LearningWithPrepareTransient,
  LearningWithPrepare,
  LearningSucceeded,
  LearningFailed
};
const char* _klearner_statusNames[] = {
  "LearningInvalid",
  "LearningWithoutPrepare",
  "LearningWithPrepareTransient",
  "LearningWithPrepare",
  "LearningSucceeded",
  "LearningFailed"
};
const std::map<int, const char*> _learner_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _klearner_statusValues, _klearner_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kconfig_typeValues[] = {
  CT_INVALID,
  CT_ASSIGN_PRIMARY,
  CT_UPGRADE_TO_PRIMARY,
  CT_ADD_SECONDARY,
  CT_UPGRADE_TO_SECONDARY,
  CT_DOWNGRADE_TO_SECONDARY,
  CT_DOWNGRADE_TO_INACTIVE,
  CT_REMOVE,
  CT_ADD_SECONDARY_FOR_LB
};
const char* _kconfig_typeNames[] = {
  "CT_INVALID",
  "CT_ASSIGN_PRIMARY",
  "CT_UPGRADE_TO_PRIMARY",
  "CT_ADD_SECONDARY",
  "CT_UPGRADE_TO_SECONDARY",
  "CT_DOWNGRADE_TO_SECONDARY",
  "CT_DOWNGRADE_TO_INACTIVE",
  "CT_REMOVE",
  "CT_ADD_SECONDARY_FOR_LB"
};
const std::map<int, const char*> _config_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kconfig_typeValues, _kconfig_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kapp_statusValues[] = {
  AS_INVALID,
  AS_AVAILABLE,
  AS_CREATING,
  AS_CREATE_FAILED,
  AS_DROPPING,
  AS_DROP_FAILED,
  AS_DROPPED
};
const char* _kapp_statusNames[] = {
  "AS_INVALID",
  "AS_AVAILABLE",
  "AS_CREATING",
  "AS_CREATE_FAILED",
  "AS_DROPPING",
  "AS_DROP_FAILED",
  "AS_DROPPED"
};
const std::map<int, const char*> _app_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kapp_statusValues, _kapp_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knode_statusValues[] = {
  NS_INVALID,
  NS_ALIVE,
  NS_UNALIVE
};
const char* _knode_statusNames[] = {
  "NS_INVALID",
  "NS_ALIVE",
  "NS_UNALIVE"
};
const std::map<int, const char*> _node_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _knode_statusValues, _knode_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kbalancer_typeValues[] = {
  BT_INVALID,
  BT_MOVE_PRIMARY,
  BT_COPY_PRIMARY,
  BT_COPY_SECONDARY
};
const char* _kbalancer_typeNames[] = {
  "BT_INVALID",
  "BT_MOVE_PRIMARY",
  "BT_COPY_PRIMARY",
  "BT_COPY_SECONDARY"
};
const std::map<int, const char*> _balancer_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kbalancer_typeValues, _kbalancer_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


global_partition_id::~global_partition_id() throw() {
}


void global_partition_id::__set_app_id(const int32_t val) {
  this->app_id = val;
}

void global_partition_id::__set_pidx(const int32_t val) {
  this->pidx = val;
}

uint32_t global_partition_id::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pidx);
          this->__isset.pidx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t global_partition_id::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("global_partition_id");

  xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pidx", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->pidx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(global_partition_id &a, global_partition_id &b) {
  using ::std::swap;
  swap(a.app_id, b.app_id);
  swap(a.pidx, b.pidx);
  swap(a.__isset, b.__isset);
}

global_partition_id::global_partition_id(const global_partition_id& other0) {
  app_id = other0.app_id;
  pidx = other0.pidx;
  __isset = other0.__isset;
}
global_partition_id::global_partition_id( global_partition_id&& other1) {
  app_id = std::move(other1.app_id);
  pidx = std::move(other1.pidx);
  __isset = std::move(other1.__isset);
}
global_partition_id& global_partition_id::operator=(const global_partition_id& other2) {
  app_id = other2.app_id;
  pidx = other2.pidx;
  __isset = other2.__isset;
  return *this;
}
global_partition_id& global_partition_id::operator=(global_partition_id&& other3) {
  app_id = std::move(other3.app_id);
  pidx = std::move(other3.pidx);
  __isset = std::move(other3.__isset);
  return *this;
}
void global_partition_id::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "global_partition_id(";
  out << "app_id=" << to_string(app_id);
  out << ", " << "pidx=" << to_string(pidx);
  out << ")";
}


mutation_header::~mutation_header() throw() {
}


void mutation_header::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void mutation_header::__set_ballot(const int64_t val) {
  this->ballot = val;
}

void mutation_header::__set_decree(const int64_t val) {
  this->decree = val;
}

void mutation_header::__set_log_offset(const int64_t val) {
  this->log_offset = val;
}

void mutation_header::__set_last_committed_decree(const int64_t val) {
  this->last_committed_decree = val;
}

uint32_t mutation_header::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->decree);
          this->__isset.decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->log_offset);
          this->__isset.log_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree);
          this->__isset.last_committed_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t mutation_header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("mutation_header");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decree", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_offset", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->log_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->last_committed_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(mutation_header &a, mutation_header &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.decree, b.decree);
  swap(a.log_offset, b.log_offset);
  swap(a.last_committed_decree, b.last_committed_decree);
  swap(a.__isset, b.__isset);
}

mutation_header::mutation_header(const mutation_header& other4) {
  gpid = other4.gpid;
  ballot = other4.ballot;
  decree = other4.decree;
  log_offset = other4.log_offset;
  last_committed_decree = other4.last_committed_decree;
  __isset = other4.__isset;
}
mutation_header::mutation_header( mutation_header&& other5) {
  gpid = std::move(other5.gpid);
  ballot = std::move(other5.ballot);
  decree = std::move(other5.decree);
  log_offset = std::move(other5.log_offset);
  last_committed_decree = std::move(other5.last_committed_decree);
  __isset = std::move(other5.__isset);
}
mutation_header& mutation_header::operator=(const mutation_header& other6) {
  gpid = other6.gpid;
  ballot = other6.ballot;
  decree = other6.decree;
  log_offset = other6.log_offset;
  last_committed_decree = other6.last_committed_decree;
  __isset = other6.__isset;
  return *this;
}
mutation_header& mutation_header::operator=(mutation_header&& other7) {
  gpid = std::move(other7.gpid);
  ballot = std::move(other7.ballot);
  decree = std::move(other7.decree);
  log_offset = std::move(other7.log_offset);
  last_committed_decree = std::move(other7.last_committed_decree);
  __isset = std::move(other7.__isset);
  return *this;
}
void mutation_header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "mutation_header(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "ballot=" << to_string(ballot);
  out << ", " << "decree=" << to_string(decree);
  out << ", " << "log_offset=" << to_string(log_offset);
  out << ", " << "last_committed_decree=" << to_string(last_committed_decree);
  out << ")";
}


mutation_update::~mutation_update() throw() {
}


void mutation_update::__set_code(const  ::dsn::task_code& val) {
  this->code = val;
}

void mutation_update::__set_data(const  ::dsn::blob& val) {
  this->data = val;
}

uint32_t mutation_update::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->code.read(iprot);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t mutation_update::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("mutation_update");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->code.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(mutation_update &a, mutation_update &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

mutation_update::mutation_update(const mutation_update& other8) {
  code = other8.code;
  data = other8.data;
  __isset = other8.__isset;
}
mutation_update::mutation_update( mutation_update&& other9) {
  code = std::move(other9.code);
  data = std::move(other9.data);
  __isset = std::move(other9.__isset);
}
mutation_update& mutation_update::operator=(const mutation_update& other10) {
  code = other10.code;
  data = other10.data;
  __isset = other10.__isset;
  return *this;
}
mutation_update& mutation_update::operator=(mutation_update&& other11) {
  code = std::move(other11.code);
  data = std::move(other11.data);
  __isset = std::move(other11.__isset);
  return *this;
}
void mutation_update::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "mutation_update(";
  out << "code=" << to_string(code);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


mutation_data::~mutation_data() throw() {
}


void mutation_data::__set_header(const mutation_header& val) {
  this->header = val;
}

void mutation_data::__set_updates(const std::vector<mutation_update> & val) {
  this->updates = val;
}

uint32_t mutation_data::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->updates.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->updates.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->updates[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.updates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t mutation_data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("mutation_data");

  xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->header.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updates", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->updates.size()));
    std::vector<mutation_update> ::const_iterator _iter17;
    for (_iter17 = this->updates.begin(); _iter17 != this->updates.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(mutation_data &a, mutation_data &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.updates, b.updates);
  swap(a.__isset, b.__isset);
}

mutation_data::mutation_data(const mutation_data& other18) {
  header = other18.header;
  updates = other18.updates;
  __isset = other18.__isset;
}
mutation_data::mutation_data( mutation_data&& other19) {
  header = std::move(other19.header);
  updates = std::move(other19.updates);
  __isset = std::move(other19.__isset);
}
mutation_data& mutation_data::operator=(const mutation_data& other20) {
  header = other20.header;
  updates = other20.updates;
  __isset = other20.__isset;
  return *this;
}
mutation_data& mutation_data::operator=(mutation_data&& other21) {
  header = std::move(other21.header);
  updates = std::move(other21.updates);
  __isset = std::move(other21.__isset);
  return *this;
}
void mutation_data::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "mutation_data(";
  out << "header=" << to_string(header);
  out << ", " << "updates=" << to_string(updates);
  out << ")";
}


partition_configuration::~partition_configuration() throw() {
}


void partition_configuration::__set_app_type(const std::string& val) {
  this->app_type = val;
}

void partition_configuration::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void partition_configuration::__set_ballot(const int64_t val) {
  this->ballot = val;
}

void partition_configuration::__set_max_replica_count(const int32_t val) {
  this->max_replica_count = val;
}

void partition_configuration::__set_primary(const  ::dsn::rpc_address& val) {
  this->primary = val;
}

void partition_configuration::__set_secondaries(const std::vector< ::dsn::rpc_address> & val) {
  this->secondaries = val;
}

void partition_configuration::__set_last_drops(const std::vector< ::dsn::rpc_address> & val) {
  this->last_drops = val;
}

void partition_configuration::__set_last_committed_decree(const int64_t val) {
  this->last_committed_decree = val;
}

uint32_t partition_configuration::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_type);
          this->__isset.app_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_replica_count);
          this->__isset.max_replica_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->primary.read(iprot);
          this->__isset.primary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->secondaries.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->secondaries.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->secondaries[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.secondaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->last_drops.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->last_drops.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->last_drops[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.last_drops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree);
          this->__isset.last_committed_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t partition_configuration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("partition_configuration");

  xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_replica_count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->max_replica_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("primary", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->primary.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("secondaries", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->secondaries.size()));
    std::vector< ::dsn::rpc_address> ::const_iterator _iter32;
    for (_iter32 = this->secondaries.begin(); _iter32 != this->secondaries.end(); ++_iter32)
    {
      xfer += (*_iter32).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_drops", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->last_drops.size()));
    std::vector< ::dsn::rpc_address> ::const_iterator _iter33;
    for (_iter33 = this->last_drops.begin(); _iter33 != this->last_drops.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->last_committed_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(partition_configuration &a, partition_configuration &b) {
  using ::std::swap;
  swap(a.app_type, b.app_type);
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.max_replica_count, b.max_replica_count);
  swap(a.primary, b.primary);
  swap(a.secondaries, b.secondaries);
  swap(a.last_drops, b.last_drops);
  swap(a.last_committed_decree, b.last_committed_decree);
  swap(a.__isset, b.__isset);
}

partition_configuration::partition_configuration(const partition_configuration& other34) {
  app_type = other34.app_type;
  gpid = other34.gpid;
  ballot = other34.ballot;
  max_replica_count = other34.max_replica_count;
  primary = other34.primary;
  secondaries = other34.secondaries;
  last_drops = other34.last_drops;
  last_committed_decree = other34.last_committed_decree;
  __isset = other34.__isset;
}
partition_configuration::partition_configuration( partition_configuration&& other35) {
  app_type = std::move(other35.app_type);
  gpid = std::move(other35.gpid);
  ballot = std::move(other35.ballot);
  max_replica_count = std::move(other35.max_replica_count);
  primary = std::move(other35.primary);
  secondaries = std::move(other35.secondaries);
  last_drops = std::move(other35.last_drops);
  last_committed_decree = std::move(other35.last_committed_decree);
  __isset = std::move(other35.__isset);
}
partition_configuration& partition_configuration::operator=(const partition_configuration& other36) {
  app_type = other36.app_type;
  gpid = other36.gpid;
  ballot = other36.ballot;
  max_replica_count = other36.max_replica_count;
  primary = other36.primary;
  secondaries = other36.secondaries;
  last_drops = other36.last_drops;
  last_committed_decree = other36.last_committed_decree;
  __isset = other36.__isset;
  return *this;
}
partition_configuration& partition_configuration::operator=(partition_configuration&& other37) {
  app_type = std::move(other37.app_type);
  gpid = std::move(other37.gpid);
  ballot = std::move(other37.ballot);
  max_replica_count = std::move(other37.max_replica_count);
  primary = std::move(other37.primary);
  secondaries = std::move(other37.secondaries);
  last_drops = std::move(other37.last_drops);
  last_committed_decree = std::move(other37.last_committed_decree);
  __isset = std::move(other37.__isset);
  return *this;
}
void partition_configuration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "partition_configuration(";
  out << "app_type=" << to_string(app_type);
  out << ", " << "gpid=" << to_string(gpid);
  out << ", " << "ballot=" << to_string(ballot);
  out << ", " << "max_replica_count=" << to_string(max_replica_count);
  out << ", " << "primary=" << to_string(primary);
  out << ", " << "secondaries=" << to_string(secondaries);
  out << ", " << "last_drops=" << to_string(last_drops);
  out << ", " << "last_committed_decree=" << to_string(last_committed_decree);
  out << ")";
}


replica_configuration::~replica_configuration() throw() {
}


void replica_configuration::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void replica_configuration::__set_ballot(const int64_t val) {
  this->ballot = val;
}

void replica_configuration::__set_primary(const  ::dsn::rpc_address& val) {
  this->primary = val;
}

void replica_configuration::__set_status(const partition_status val) {
  this->status = val;
}

void replica_configuration::__set_learner_signature(const int64_t val) {
  this->learner_signature = val;
}

uint32_t replica_configuration::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->primary.read(iprot);
          this->__isset.primary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->status = (partition_status)ecast38;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->learner_signature);
          this->__isset.learner_signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t replica_configuration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("replica_configuration");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("primary", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->primary.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("learner_signature", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->learner_signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(replica_configuration &a, replica_configuration &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.primary, b.primary);
  swap(a.status, b.status);
  swap(a.learner_signature, b.learner_signature);
  swap(a.__isset, b.__isset);
}

replica_configuration::replica_configuration(const replica_configuration& other39) {
  gpid = other39.gpid;
  ballot = other39.ballot;
  primary = other39.primary;
  status = other39.status;
  learner_signature = other39.learner_signature;
  __isset = other39.__isset;
}
replica_configuration::replica_configuration( replica_configuration&& other40) {
  gpid = std::move(other40.gpid);
  ballot = std::move(other40.ballot);
  primary = std::move(other40.primary);
  status = std::move(other40.status);
  learner_signature = std::move(other40.learner_signature);
  __isset = std::move(other40.__isset);
}
replica_configuration& replica_configuration::operator=(const replica_configuration& other41) {
  gpid = other41.gpid;
  ballot = other41.ballot;
  primary = other41.primary;
  status = other41.status;
  learner_signature = other41.learner_signature;
  __isset = other41.__isset;
  return *this;
}
replica_configuration& replica_configuration::operator=(replica_configuration&& other42) {
  gpid = std::move(other42.gpid);
  ballot = std::move(other42.ballot);
  primary = std::move(other42.primary);
  status = std::move(other42.status);
  learner_signature = std::move(other42.learner_signature);
  __isset = std::move(other42.__isset);
  return *this;
}
void replica_configuration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "replica_configuration(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "ballot=" << to_string(ballot);
  out << ", " << "primary=" << to_string(primary);
  out << ", " << "status=" << to_string(status);
  out << ", " << "learner_signature=" << to_string(learner_signature);
  out << ")";
}


prepare_msg::~prepare_msg() throw() {
}


void prepare_msg::__set_config(const replica_configuration& val) {
  this->config = val;
}

void prepare_msg::__set_mu(const mutation_data& val) {
  this->mu = val;
}

uint32_t prepare_msg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mu.read(iprot);
          this->__isset.mu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t prepare_msg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("prepare_msg");

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mu", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mu.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(prepare_msg &a, prepare_msg &b) {
  using ::std::swap;
  swap(a.config, b.config);
  swap(a.mu, b.mu);
  swap(a.__isset, b.__isset);
}

prepare_msg::prepare_msg(const prepare_msg& other43) {
  config = other43.config;
  mu = other43.mu;
  __isset = other43.__isset;
}
prepare_msg::prepare_msg( prepare_msg&& other44) {
  config = std::move(other44.config);
  mu = std::move(other44.mu);
  __isset = std::move(other44.__isset);
}
prepare_msg& prepare_msg::operator=(const prepare_msg& other45) {
  config = other45.config;
  mu = other45.mu;
  __isset = other45.__isset;
  return *this;
}
prepare_msg& prepare_msg::operator=(prepare_msg&& other46) {
  config = std::move(other46.config);
  mu = std::move(other46.mu);
  __isset = std::move(other46.__isset);
  return *this;
}
void prepare_msg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "prepare_msg(";
  out << "config=" << to_string(config);
  out << ", " << "mu=" << to_string(mu);
  out << ")";
}


read_request_header::~read_request_header() throw() {
}


void read_request_header::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void read_request_header::__set_code(const  ::dsn::task_code& val) {
  this->code = val;
}

void read_request_header::__set_semantic(const read_semantic val) {
  this->semantic = val;
}

void read_request_header::__set_version_decree(const int64_t val) {
  this->version_decree = val;
}

uint32_t read_request_header::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->code.read(iprot);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast47;
          xfer += iprot->readI32(ecast47);
          this->semantic = (read_semantic)ecast47;
          this->__isset.semantic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version_decree);
          this->__isset.version_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t read_request_header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("read_request_header");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->code.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("semantic", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->semantic);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version_decree", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->version_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(read_request_header &a, read_request_header &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.code, b.code);
  swap(a.semantic, b.semantic);
  swap(a.version_decree, b.version_decree);
  swap(a.__isset, b.__isset);
}

read_request_header::read_request_header(const read_request_header& other48) {
  gpid = other48.gpid;
  code = other48.code;
  semantic = other48.semantic;
  version_decree = other48.version_decree;
  __isset = other48.__isset;
}
read_request_header::read_request_header( read_request_header&& other49) {
  gpid = std::move(other49.gpid);
  code = std::move(other49.code);
  semantic = std::move(other49.semantic);
  version_decree = std::move(other49.version_decree);
  __isset = std::move(other49.__isset);
}
read_request_header& read_request_header::operator=(const read_request_header& other50) {
  gpid = other50.gpid;
  code = other50.code;
  semantic = other50.semantic;
  version_decree = other50.version_decree;
  __isset = other50.__isset;
  return *this;
}
read_request_header& read_request_header::operator=(read_request_header&& other51) {
  gpid = std::move(other51.gpid);
  code = std::move(other51.code);
  semantic = std::move(other51.semantic);
  version_decree = std::move(other51.version_decree);
  __isset = std::move(other51.__isset);
  return *this;
}
void read_request_header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "read_request_header(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "code=" << to_string(code);
  out << ", " << "semantic=" << to_string(semantic);
  out << ", " << "version_decree=" << to_string(version_decree);
  out << ")";
}


write_request_header::~write_request_header() throw() {
}


void write_request_header::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void write_request_header::__set_code(const  ::dsn::task_code& val) {
  this->code = val;
}

uint32_t write_request_header::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->code.read(iprot);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t write_request_header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("write_request_header");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->code.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(write_request_header &a, write_request_header &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

write_request_header::write_request_header(const write_request_header& other52) {
  gpid = other52.gpid;
  code = other52.code;
  __isset = other52.__isset;
}
write_request_header::write_request_header( write_request_header&& other53) {
  gpid = std::move(other53.gpid);
  code = std::move(other53.code);
  __isset = std::move(other53.__isset);
}
write_request_header& write_request_header::operator=(const write_request_header& other54) {
  gpid = other54.gpid;
  code = other54.code;
  __isset = other54.__isset;
  return *this;
}
write_request_header& write_request_header::operator=(write_request_header&& other55) {
  gpid = std::move(other55.gpid);
  code = std::move(other55.code);
  __isset = std::move(other55.__isset);
  return *this;
}
void write_request_header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "write_request_header(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "code=" << to_string(code);
  out << ")";
}


rw_response_header::~rw_response_header() throw() {
}


void rw_response_header::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

uint32_t rw_response_header::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rw_response_header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("rw_response_header");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(rw_response_header &a, rw_response_header &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.__isset, b.__isset);
}

rw_response_header::rw_response_header(const rw_response_header& other56) {
  err = other56.err;
  __isset = other56.__isset;
}
rw_response_header::rw_response_header( rw_response_header&& other57) {
  err = std::move(other57.err);
  __isset = std::move(other57.__isset);
}
rw_response_header& rw_response_header::operator=(const rw_response_header& other58) {
  err = other58.err;
  __isset = other58.__isset;
  return *this;
}
rw_response_header& rw_response_header::operator=(rw_response_header&& other59) {
  err = std::move(other59.err);
  __isset = std::move(other59.__isset);
  return *this;
}
void rw_response_header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "rw_response_header(";
  out << "err=" << to_string(err);
  out << ")";
}


prepare_ack::~prepare_ack() throw() {
}


void prepare_ack::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void prepare_ack::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void prepare_ack::__set_ballot(const int64_t val) {
  this->ballot = val;
}

void prepare_ack::__set_decree(const int64_t val) {
  this->decree = val;
}

void prepare_ack::__set_last_committed_decree_in_app(const int64_t val) {
  this->last_committed_decree_in_app = val;
}

void prepare_ack::__set_last_committed_decree_in_prepare_list(const int64_t val) {
  this->last_committed_decree_in_prepare_list = val;
}

uint32_t prepare_ack::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->decree);
          this->__isset.decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree_in_app);
          this->__isset.last_committed_decree_in_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
          this->__isset.last_committed_decree_in_prepare_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t prepare_ack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("prepare_ack");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decree", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->last_committed_decree_in_app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(prepare_ack &a, prepare_ack &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.err, b.err);
  swap(a.ballot, b.ballot);
  swap(a.decree, b.decree);
  swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
  swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
  swap(a.__isset, b.__isset);
}

prepare_ack::prepare_ack(const prepare_ack& other60) {
  gpid = other60.gpid;
  err = other60.err;
  ballot = other60.ballot;
  decree = other60.decree;
  last_committed_decree_in_app = other60.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other60.last_committed_decree_in_prepare_list;
  __isset = other60.__isset;
}
prepare_ack::prepare_ack( prepare_ack&& other61) {
  gpid = std::move(other61.gpid);
  err = std::move(other61.err);
  ballot = std::move(other61.ballot);
  decree = std::move(other61.decree);
  last_committed_decree_in_app = std::move(other61.last_committed_decree_in_app);
  last_committed_decree_in_prepare_list = std::move(other61.last_committed_decree_in_prepare_list);
  __isset = std::move(other61.__isset);
}
prepare_ack& prepare_ack::operator=(const prepare_ack& other62) {
  gpid = other62.gpid;
  err = other62.err;
  ballot = other62.ballot;
  decree = other62.decree;
  last_committed_decree_in_app = other62.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other62.last_committed_decree_in_prepare_list;
  __isset = other62.__isset;
  return *this;
}
prepare_ack& prepare_ack::operator=(prepare_ack&& other63) {
  gpid = std::move(other63.gpid);
  err = std::move(other63.err);
  ballot = std::move(other63.ballot);
  decree = std::move(other63.decree);
  last_committed_decree_in_app = std::move(other63.last_committed_decree_in_app);
  last_committed_decree_in_prepare_list = std::move(other63.last_committed_decree_in_prepare_list);
  __isset = std::move(other63.__isset);
  return *this;
}
void prepare_ack::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "prepare_ack(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "err=" << to_string(err);
  out << ", " << "ballot=" << to_string(ballot);
  out << ", " << "decree=" << to_string(decree);
  out << ", " << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
  out << ", " << "last_committed_decree_in_prepare_list=" << to_string(last_committed_decree_in_prepare_list);
  out << ")";
}


learn_state::~learn_state() throw() {
}


void learn_state::__set_from_decree_excluded(const int64_t val) {
  this->from_decree_excluded = val;
}

void learn_state::__set_to_decree_included(const int64_t val) {
  this->to_decree_included = val;
}

void learn_state::__set_meta(const std::vector< ::dsn::blob> & val) {
  this->meta = val;
}

void learn_state::__set_files(const std::vector<std::string> & val) {
  this->files = val;
}

uint32_t learn_state::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->from_decree_excluded);
          this->__isset.from_decree_excluded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->to_decree_included);
          this->__isset.to_decree_included = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->meta.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->meta.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += this->meta[_i68].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.meta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->files.clear();
            uint32_t _size69;
            ::apache::thrift::protocol::TType _etype72;
            xfer += iprot->readListBegin(_etype72, _size69);
            this->files.resize(_size69);
            uint32_t _i73;
            for (_i73 = 0; _i73 < _size69; ++_i73)
            {
              xfer += iprot->readString(this->files[_i73]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t learn_state::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("learn_state");

  xfer += oprot->writeFieldBegin("from_decree_excluded", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->from_decree_excluded);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_decree_included", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->to_decree_included);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->meta.size()));
    std::vector< ::dsn::blob> ::const_iterator _iter74;
    for (_iter74 = this->meta.begin(); _iter74 != this->meta.end(); ++_iter74)
    {
      xfer += (*_iter74).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("files", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->files.size()));
    std::vector<std::string> ::const_iterator _iter75;
    for (_iter75 = this->files.begin(); _iter75 != this->files.end(); ++_iter75)
    {
      xfer += oprot->writeString((*_iter75));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(learn_state &a, learn_state &b) {
  using ::std::swap;
  swap(a.from_decree_excluded, b.from_decree_excluded);
  swap(a.to_decree_included, b.to_decree_included);
  swap(a.meta, b.meta);
  swap(a.files, b.files);
  swap(a.__isset, b.__isset);
}

learn_state::learn_state(const learn_state& other76) {
  from_decree_excluded = other76.from_decree_excluded;
  to_decree_included = other76.to_decree_included;
  meta = other76.meta;
  files = other76.files;
  __isset = other76.__isset;
}
learn_state::learn_state( learn_state&& other77) {
  from_decree_excluded = std::move(other77.from_decree_excluded);
  to_decree_included = std::move(other77.to_decree_included);
  meta = std::move(other77.meta);
  files = std::move(other77.files);
  __isset = std::move(other77.__isset);
}
learn_state& learn_state::operator=(const learn_state& other78) {
  from_decree_excluded = other78.from_decree_excluded;
  to_decree_included = other78.to_decree_included;
  meta = other78.meta;
  files = other78.files;
  __isset = other78.__isset;
  return *this;
}
learn_state& learn_state::operator=(learn_state&& other79) {
  from_decree_excluded = std::move(other79.from_decree_excluded);
  to_decree_included = std::move(other79.to_decree_included);
  meta = std::move(other79.meta);
  files = std::move(other79.files);
  __isset = std::move(other79.__isset);
  return *this;
}
void learn_state::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "learn_state(";
  out << "from_decree_excluded=" << to_string(from_decree_excluded);
  out << ", " << "to_decree_included=" << to_string(to_decree_included);
  out << ", " << "meta=" << to_string(meta);
  out << ", " << "files=" << to_string(files);
  out << ")";
}


learn_request::~learn_request() throw() {
}


void learn_request::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void learn_request::__set_learner(const  ::dsn::rpc_address& val) {
  this->learner = val;
}

void learn_request::__set_signature(const int64_t val) {
  this->signature = val;
}

void learn_request::__set_last_committed_decree_in_app(const int64_t val) {
  this->last_committed_decree_in_app = val;
}

void learn_request::__set_last_committed_decree_in_prepare_list(const int64_t val) {
  this->last_committed_decree_in_prepare_list = val;
}

void learn_request::__set_app_specific_learn_request(const  ::dsn::blob& val) {
  this->app_specific_learn_request = val;
}

uint32_t learn_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->learner.read(iprot);
          this->__isset.learner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree_in_app);
          this->__isset.last_committed_decree_in_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
          this->__isset.last_committed_decree_in_prepare_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->app_specific_learn_request.read(iprot);
          this->__isset.app_specific_learn_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t learn_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("learn_request");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("learner", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->learner.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->last_committed_decree_in_app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_specific_learn_request", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->app_specific_learn_request.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(learn_request &a, learn_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.learner, b.learner);
  swap(a.signature, b.signature);
  swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
  swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
  swap(a.app_specific_learn_request, b.app_specific_learn_request);
  swap(a.__isset, b.__isset);
}

learn_request::learn_request(const learn_request& other80) {
  gpid = other80.gpid;
  learner = other80.learner;
  signature = other80.signature;
  last_committed_decree_in_app = other80.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other80.last_committed_decree_in_prepare_list;
  app_specific_learn_request = other80.app_specific_learn_request;
  __isset = other80.__isset;
}
learn_request::learn_request( learn_request&& other81) {
  gpid = std::move(other81.gpid);
  learner = std::move(other81.learner);
  signature = std::move(other81.signature);
  last_committed_decree_in_app = std::move(other81.last_committed_decree_in_app);
  last_committed_decree_in_prepare_list = std::move(other81.last_committed_decree_in_prepare_list);
  app_specific_learn_request = std::move(other81.app_specific_learn_request);
  __isset = std::move(other81.__isset);
}
learn_request& learn_request::operator=(const learn_request& other82) {
  gpid = other82.gpid;
  learner = other82.learner;
  signature = other82.signature;
  last_committed_decree_in_app = other82.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other82.last_committed_decree_in_prepare_list;
  app_specific_learn_request = other82.app_specific_learn_request;
  __isset = other82.__isset;
  return *this;
}
learn_request& learn_request::operator=(learn_request&& other83) {
  gpid = std::move(other83.gpid);
  learner = std::move(other83.learner);
  signature = std::move(other83.signature);
  last_committed_decree_in_app = std::move(other83.last_committed_decree_in_app);
  last_committed_decree_in_prepare_list = std::move(other83.last_committed_decree_in_prepare_list);
  app_specific_learn_request = std::move(other83.app_specific_learn_request);
  __isset = std::move(other83.__isset);
  return *this;
}
void learn_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "learn_request(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "learner=" << to_string(learner);
  out << ", " << "signature=" << to_string(signature);
  out << ", " << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
  out << ", " << "last_committed_decree_in_prepare_list=" << to_string(last_committed_decree_in_prepare_list);
  out << ", " << "app_specific_learn_request=" << to_string(app_specific_learn_request);
  out << ")";
}


learn_response::~learn_response() throw() {
}


void learn_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void learn_response::__set_config(const replica_configuration& val) {
  this->config = val;
}

void learn_response::__set_last_committed_decree(const int64_t val) {
  this->last_committed_decree = val;
}

void learn_response::__set_prepare_start_decree(const int64_t val) {
  this->prepare_start_decree = val;
}

void learn_response::__set_type(const learn_type val) {
  this->type = val;
}

void learn_response::__set_state(const learn_state& val) {
  this->state = val;
}

void learn_response::__set_address(const  ::dsn::rpc_address& val) {
  this->address = val;
}

void learn_response::__set_base_local_dir(const std::string& val) {
  this->base_local_dir = val;
}

uint32_t learn_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree);
          this->__isset.last_committed_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prepare_start_decree);
          this->__isset.prepare_start_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->type = (learn_type)ecast84;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->state.read(iprot);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->address.read(iprot);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->base_local_dir);
          this->__isset.base_local_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t learn_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("learn_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->last_committed_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prepare_start_decree", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->prepare_start_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->state.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_local_dir", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->base_local_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(learn_response &a, learn_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.config, b.config);
  swap(a.last_committed_decree, b.last_committed_decree);
  swap(a.prepare_start_decree, b.prepare_start_decree);
  swap(a.type, b.type);
  swap(a.state, b.state);
  swap(a.address, b.address);
  swap(a.base_local_dir, b.base_local_dir);
  swap(a.__isset, b.__isset);
}

learn_response::learn_response(const learn_response& other85) {
  err = other85.err;
  config = other85.config;
  last_committed_decree = other85.last_committed_decree;
  prepare_start_decree = other85.prepare_start_decree;
  type = other85.type;
  state = other85.state;
  address = other85.address;
  base_local_dir = other85.base_local_dir;
  __isset = other85.__isset;
}
learn_response::learn_response( learn_response&& other86) {
  err = std::move(other86.err);
  config = std::move(other86.config);
  last_committed_decree = std::move(other86.last_committed_decree);
  prepare_start_decree = std::move(other86.prepare_start_decree);
  type = std::move(other86.type);
  state = std::move(other86.state);
  address = std::move(other86.address);
  base_local_dir = std::move(other86.base_local_dir);
  __isset = std::move(other86.__isset);
}
learn_response& learn_response::operator=(const learn_response& other87) {
  err = other87.err;
  config = other87.config;
  last_committed_decree = other87.last_committed_decree;
  prepare_start_decree = other87.prepare_start_decree;
  type = other87.type;
  state = other87.state;
  address = other87.address;
  base_local_dir = other87.base_local_dir;
  __isset = other87.__isset;
  return *this;
}
learn_response& learn_response::operator=(learn_response&& other88) {
  err = std::move(other88.err);
  config = std::move(other88.config);
  last_committed_decree = std::move(other88.last_committed_decree);
  prepare_start_decree = std::move(other88.prepare_start_decree);
  type = std::move(other88.type);
  state = std::move(other88.state);
  address = std::move(other88.address);
  base_local_dir = std::move(other88.base_local_dir);
  __isset = std::move(other88.__isset);
  return *this;
}
void learn_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "learn_response(";
  out << "err=" << to_string(err);
  out << ", " << "config=" << to_string(config);
  out << ", " << "last_committed_decree=" << to_string(last_committed_decree);
  out << ", " << "prepare_start_decree=" << to_string(prepare_start_decree);
  out << ", " << "type=" << to_string(type);
  out << ", " << "state=" << to_string(state);
  out << ", " << "address=" << to_string(address);
  out << ", " << "base_local_dir=" << to_string(base_local_dir);
  out << ")";
}


group_check_request::~group_check_request() throw() {
}


void group_check_request::__set_app_type(const std::string& val) {
  this->app_type = val;
}

void group_check_request::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

void group_check_request::__set_config(const replica_configuration& val) {
  this->config = val;
}

void group_check_request::__set_last_committed_decree(const int64_t val) {
  this->last_committed_decree = val;
}

uint32_t group_check_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_type);
          this->__isset.app_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree);
          this->__isset.last_committed_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t group_check_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("group_check_request");

  xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->last_committed_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(group_check_request &a, group_check_request &b) {
  using ::std::swap;
  swap(a.app_type, b.app_type);
  swap(a.node, b.node);
  swap(a.config, b.config);
  swap(a.last_committed_decree, b.last_committed_decree);
  swap(a.__isset, b.__isset);
}

group_check_request::group_check_request(const group_check_request& other89) {
  app_type = other89.app_type;
  node = other89.node;
  config = other89.config;
  last_committed_decree = other89.last_committed_decree;
  __isset = other89.__isset;
}
group_check_request::group_check_request( group_check_request&& other90) {
  app_type = std::move(other90.app_type);
  node = std::move(other90.node);
  config = std::move(other90.config);
  last_committed_decree = std::move(other90.last_committed_decree);
  __isset = std::move(other90.__isset);
}
group_check_request& group_check_request::operator=(const group_check_request& other91) {
  app_type = other91.app_type;
  node = other91.node;
  config = other91.config;
  last_committed_decree = other91.last_committed_decree;
  __isset = other91.__isset;
  return *this;
}
group_check_request& group_check_request::operator=(group_check_request&& other92) {
  app_type = std::move(other92.app_type);
  node = std::move(other92.node);
  config = std::move(other92.config);
  last_committed_decree = std::move(other92.last_committed_decree);
  __isset = std::move(other92.__isset);
  return *this;
}
void group_check_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "group_check_request(";
  out << "app_type=" << to_string(app_type);
  out << ", " << "node=" << to_string(node);
  out << ", " << "config=" << to_string(config);
  out << ", " << "last_committed_decree=" << to_string(last_committed_decree);
  out << ")";
}


group_check_response::~group_check_response() throw() {
}


void group_check_response::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void group_check_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void group_check_response::__set_last_committed_decree_in_app(const int64_t val) {
  this->last_committed_decree_in_app = val;
}

void group_check_response::__set_last_committed_decree_in_prepare_list(const int64_t val) {
  this->last_committed_decree_in_prepare_list = val;
}

void group_check_response::__set_learner_status_(const learner_status val) {
  this->learner_status_ = val;
}

void group_check_response::__set_learner_signature(const int64_t val) {
  this->learner_signature = val;
}

void group_check_response::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

uint32_t group_check_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree_in_app);
          this->__isset.last_committed_decree_in_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
          this->__isset.last_committed_decree_in_prepare_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast93;
          xfer += iprot->readI32(ecast93);
          this->learner_status_ = (learner_status)ecast93;
          this->__isset.learner_status_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->learner_signature);
          this->__isset.learner_signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t group_check_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("group_check_response");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->last_committed_decree_in_app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("learner_status_", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->learner_status_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("learner_signature", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->learner_signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(group_check_response &a, group_check_response &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.err, b.err);
  swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
  swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
  swap(a.learner_status_, b.learner_status_);
  swap(a.learner_signature, b.learner_signature);
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

group_check_response::group_check_response(const group_check_response& other94) {
  gpid = other94.gpid;
  err = other94.err;
  last_committed_decree_in_app = other94.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other94.last_committed_decree_in_prepare_list;
  learner_status_ = other94.learner_status_;
  learner_signature = other94.learner_signature;
  node = other94.node;
  __isset = other94.__isset;
}
group_check_response::group_check_response( group_check_response&& other95) {
  gpid = std::move(other95.gpid);
  err = std::move(other95.err);
  last_committed_decree_in_app = std::move(other95.last_committed_decree_in_app);
  last_committed_decree_in_prepare_list = std::move(other95.last_committed_decree_in_prepare_list);
  learner_status_ = std::move(other95.learner_status_);
  learner_signature = std::move(other95.learner_signature);
  node = std::move(other95.node);
  __isset = std::move(other95.__isset);
}
group_check_response& group_check_response::operator=(const group_check_response& other96) {
  gpid = other96.gpid;
  err = other96.err;
  last_committed_decree_in_app = other96.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other96.last_committed_decree_in_prepare_list;
  learner_status_ = other96.learner_status_;
  learner_signature = other96.learner_signature;
  node = other96.node;
  __isset = other96.__isset;
  return *this;
}
group_check_response& group_check_response::operator=(group_check_response&& other97) {
  gpid = std::move(other97.gpid);
  err = std::move(other97.err);
  last_committed_decree_in_app = std::move(other97.last_committed_decree_in_app);
  last_committed_decree_in_prepare_list = std::move(other97.last_committed_decree_in_prepare_list);
  learner_status_ = std::move(other97.learner_status_);
  learner_signature = std::move(other97.learner_signature);
  node = std::move(other97.node);
  __isset = std::move(other97.__isset);
  return *this;
}
void group_check_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "group_check_response(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "err=" << to_string(err);
  out << ", " << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
  out << ", " << "last_committed_decree_in_prepare_list=" << to_string(last_committed_decree_in_prepare_list);
  out << ", " << "learner_status_=" << to_string(learner_status_);
  out << ", " << "learner_signature=" << to_string(learner_signature);
  out << ", " << "node=" << to_string(node);
  out << ")";
}


app_info::~app_info() throw() {
}


void app_info::__set_status(const app_status val) {
  this->status = val;
}

void app_info::__set_app_type(const std::string& val) {
  this->app_type = val;
}

void app_info::__set_app_name(const std::string& val) {
  this->app_name = val;
}

void app_info::__set_app_id(const int32_t val) {
  this->app_id = val;
}

void app_info::__set_partition_count(const int32_t val) {
  this->partition_count = val;
}

uint32_t app_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast98;
          xfer += iprot->readI32(ecast98);
          this->status = (app_status)ecast98;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_type);
          this->__isset.app_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partition_count);
          this->__isset.partition_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t app_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("app_info");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->app_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->partition_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(app_info &a, app_info &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.app_type, b.app_type);
  swap(a.app_name, b.app_name);
  swap(a.app_id, b.app_id);
  swap(a.partition_count, b.partition_count);
  swap(a.__isset, b.__isset);
}

app_info::app_info(const app_info& other99) {
  status = other99.status;
  app_type = other99.app_type;
  app_name = other99.app_name;
  app_id = other99.app_id;
  partition_count = other99.partition_count;
  __isset = other99.__isset;
}
app_info::app_info( app_info&& other100) {
  status = std::move(other100.status);
  app_type = std::move(other100.app_type);
  app_name = std::move(other100.app_name);
  app_id = std::move(other100.app_id);
  partition_count = std::move(other100.partition_count);
  __isset = std::move(other100.__isset);
}
app_info& app_info::operator=(const app_info& other101) {
  status = other101.status;
  app_type = other101.app_type;
  app_name = other101.app_name;
  app_id = other101.app_id;
  partition_count = other101.partition_count;
  __isset = other101.__isset;
  return *this;
}
app_info& app_info::operator=(app_info&& other102) {
  status = std::move(other102.status);
  app_type = std::move(other102.app_type);
  app_name = std::move(other102.app_name);
  app_id = std::move(other102.app_id);
  partition_count = std::move(other102.partition_count);
  __isset = std::move(other102.__isset);
  return *this;
}
void app_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "app_info(";
  out << "status=" << to_string(status);
  out << ", " << "app_type=" << to_string(app_type);
  out << ", " << "app_name=" << to_string(app_name);
  out << ", " << "app_id=" << to_string(app_id);
  out << ", " << "partition_count=" << to_string(partition_count);
  out << ")";
}


node_info::~node_info() throw() {
}


void node_info::__set_status(const node_status val) {
  this->status = val;
}

void node_info::__set_address(const  ::dsn::rpc_address& val) {
  this->address = val;
}

uint32_t node_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast103;
          xfer += iprot->readI32(ecast103);
          this->status = (node_status)ecast103;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->address.read(iprot);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t node_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("node_info");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(node_info &a, node_info &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

node_info::node_info(const node_info& other104) {
  status = other104.status;
  address = other104.address;
  __isset = other104.__isset;
}
node_info::node_info( node_info&& other105) {
  status = std::move(other105.status);
  address = std::move(other105.address);
  __isset = std::move(other105.__isset);
}
node_info& node_info::operator=(const node_info& other106) {
  status = other106.status;
  address = other106.address;
  __isset = other106.__isset;
  return *this;
}
node_info& node_info::operator=(node_info&& other107) {
  status = std::move(other107.status);
  address = std::move(other107.address);
  __isset = std::move(other107.__isset);
  return *this;
}
void node_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "node_info(";
  out << "status=" << to_string(status);
  out << ", " << "address=" << to_string(address);
  out << ")";
}


meta_response_header::~meta_response_header() throw() {
}


void meta_response_header::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void meta_response_header::__set_primary_address(const  ::dsn::rpc_address& val) {
  this->primary_address = val;
}

uint32_t meta_response_header::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->primary_address.read(iprot);
          this->__isset.primary_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t meta_response_header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("meta_response_header");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("primary_address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->primary_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(meta_response_header &a, meta_response_header &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.primary_address, b.primary_address);
  swap(a.__isset, b.__isset);
}

meta_response_header::meta_response_header(const meta_response_header& other108) {
  err = other108.err;
  primary_address = other108.primary_address;
  __isset = other108.__isset;
}
meta_response_header::meta_response_header( meta_response_header&& other109) {
  err = std::move(other109.err);
  primary_address = std::move(other109.primary_address);
  __isset = std::move(other109.__isset);
}
meta_response_header& meta_response_header::operator=(const meta_response_header& other110) {
  err = other110.err;
  primary_address = other110.primary_address;
  __isset = other110.__isset;
  return *this;
}
meta_response_header& meta_response_header::operator=(meta_response_header&& other111) {
  err = std::move(other111.err);
  primary_address = std::move(other111.primary_address);
  __isset = std::move(other111.__isset);
  return *this;
}
void meta_response_header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "meta_response_header(";
  out << "err=" << to_string(err);
  out << ", " << "primary_address=" << to_string(primary_address);
  out << ")";
}


configuration_update_request::~configuration_update_request() throw() {
}


void configuration_update_request::__set_config(const partition_configuration& val) {
  this->config = val;
}

void configuration_update_request::__set_type(const config_type val) {
  this->type = val;
}

void configuration_update_request::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

uint32_t configuration_update_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast112;
          xfer += iprot->readI32(ecast112);
          this->type = (config_type)ecast112;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_update_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_update_request");

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_update_request &a, configuration_update_request &b) {
  using ::std::swap;
  swap(a.config, b.config);
  swap(a.type, b.type);
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

configuration_update_request::configuration_update_request(const configuration_update_request& other113) {
  config = other113.config;
  type = other113.type;
  node = other113.node;
  __isset = other113.__isset;
}
configuration_update_request::configuration_update_request( configuration_update_request&& other114) {
  config = std::move(other114.config);
  type = std::move(other114.type);
  node = std::move(other114.node);
  __isset = std::move(other114.__isset);
}
configuration_update_request& configuration_update_request::operator=(const configuration_update_request& other115) {
  config = other115.config;
  type = other115.type;
  node = other115.node;
  __isset = other115.__isset;
  return *this;
}
configuration_update_request& configuration_update_request::operator=(configuration_update_request&& other116) {
  config = std::move(other116.config);
  type = std::move(other116.type);
  node = std::move(other116.node);
  __isset = std::move(other116.__isset);
  return *this;
}
void configuration_update_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_update_request(";
  out << "config=" << to_string(config);
  out << ", " << "type=" << to_string(type);
  out << ", " << "node=" << to_string(node);
  out << ")";
}


configuration_update_response::~configuration_update_response() throw() {
}


void configuration_update_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void configuration_update_response::__set_config(const partition_configuration& val) {
  this->config = val;
}

uint32_t configuration_update_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_update_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_update_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_update_response &a, configuration_update_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.config, b.config);
  swap(a.__isset, b.__isset);
}

configuration_update_response::configuration_update_response(const configuration_update_response& other117) {
  err = other117.err;
  config = other117.config;
  __isset = other117.__isset;
}
configuration_update_response::configuration_update_response( configuration_update_response&& other118) {
  err = std::move(other118.err);
  config = std::move(other118.config);
  __isset = std::move(other118.__isset);
}
configuration_update_response& configuration_update_response::operator=(const configuration_update_response& other119) {
  err = other119.err;
  config = other119.config;
  __isset = other119.__isset;
  return *this;
}
configuration_update_response& configuration_update_response::operator=(configuration_update_response&& other120) {
  err = std::move(other120.err);
  config = std::move(other120.config);
  __isset = std::move(other120.__isset);
  return *this;
}
void configuration_update_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_update_response(";
  out << "err=" << to_string(err);
  out << ", " << "config=" << to_string(config);
  out << ")";
}


configuration_proposal_request::~configuration_proposal_request() throw() {
}


void configuration_proposal_request::__set_config(const partition_configuration& val) {
  this->config = val;
}

void configuration_proposal_request::__set_type(const config_type val) {
  this->type = val;
}

void configuration_proposal_request::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

void configuration_proposal_request::__set_is_clean_data(const bool val) {
  this->is_clean_data = val;
}

void configuration_proposal_request::__set_is_upgrade(const bool val) {
  this->is_upgrade = val;
}

uint32_t configuration_proposal_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->config.read(iprot);
          this->__isset.config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast121;
          xfer += iprot->readI32(ecast121);
          this->type = (config_type)ecast121;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_clean_data);
          this->__isset.is_clean_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_upgrade);
          this->__isset.is_upgrade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_proposal_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_proposal_request");

  xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->config.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_clean_data", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->is_clean_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_upgrade", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->is_upgrade);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_proposal_request &a, configuration_proposal_request &b) {
  using ::std::swap;
  swap(a.config, b.config);
  swap(a.type, b.type);
  swap(a.node, b.node);
  swap(a.is_clean_data, b.is_clean_data);
  swap(a.is_upgrade, b.is_upgrade);
  swap(a.__isset, b.__isset);
}

configuration_proposal_request::configuration_proposal_request(const configuration_proposal_request& other122) {
  config = other122.config;
  type = other122.type;
  node = other122.node;
  is_clean_data = other122.is_clean_data;
  is_upgrade = other122.is_upgrade;
  __isset = other122.__isset;
}
configuration_proposal_request::configuration_proposal_request( configuration_proposal_request&& other123) {
  config = std::move(other123.config);
  type = std::move(other123.type);
  node = std::move(other123.node);
  is_clean_data = std::move(other123.is_clean_data);
  is_upgrade = std::move(other123.is_upgrade);
  __isset = std::move(other123.__isset);
}
configuration_proposal_request& configuration_proposal_request::operator=(const configuration_proposal_request& other124) {
  config = other124.config;
  type = other124.type;
  node = other124.node;
  is_clean_data = other124.is_clean_data;
  is_upgrade = other124.is_upgrade;
  __isset = other124.__isset;
  return *this;
}
configuration_proposal_request& configuration_proposal_request::operator=(configuration_proposal_request&& other125) {
  config = std::move(other125.config);
  type = std::move(other125.type);
  node = std::move(other125.node);
  is_clean_data = std::move(other125.is_clean_data);
  is_upgrade = std::move(other125.is_upgrade);
  __isset = std::move(other125.__isset);
  return *this;
}
void configuration_proposal_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_proposal_request(";
  out << "config=" << to_string(config);
  out << ", " << "type=" << to_string(type);
  out << ", " << "node=" << to_string(node);
  out << ", " << "is_clean_data=" << to_string(is_clean_data);
  out << ", " << "is_upgrade=" << to_string(is_upgrade);
  out << ")";
}


configuration_query_by_node_request::~configuration_query_by_node_request() throw() {
}


void configuration_query_by_node_request::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

uint32_t configuration_query_by_node_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_query_by_node_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_query_by_node_request");

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_query_by_node_request &a, configuration_query_by_node_request &b) {
  using ::std::swap;
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

configuration_query_by_node_request::configuration_query_by_node_request(const configuration_query_by_node_request& other126) {
  node = other126.node;
  __isset = other126.__isset;
}
configuration_query_by_node_request::configuration_query_by_node_request( configuration_query_by_node_request&& other127) {
  node = std::move(other127.node);
  __isset = std::move(other127.__isset);
}
configuration_query_by_node_request& configuration_query_by_node_request::operator=(const configuration_query_by_node_request& other128) {
  node = other128.node;
  __isset = other128.__isset;
  return *this;
}
configuration_query_by_node_request& configuration_query_by_node_request::operator=(configuration_query_by_node_request&& other129) {
  node = std::move(other129.node);
  __isset = std::move(other129.__isset);
  return *this;
}
void configuration_query_by_node_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_query_by_node_request(";
  out << "node=" << to_string(node);
  out << ")";
}


create_app_options::~create_app_options() throw() {
}


void create_app_options::__set_partition_count(const int32_t val) {
  this->partition_count = val;
}

void create_app_options::__set_replica_count(const int32_t val) {
  this->replica_count = val;
}

void create_app_options::__set_success_if_exist(const bool val) {
  this->success_if_exist = val;
}

void create_app_options::__set_app_type(const std::string& val) {
  this->app_type = val;
}

uint32_t create_app_options::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partition_count);
          this->__isset.partition_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replica_count);
          this->__isset.replica_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success_if_exist);
          this->__isset.success_if_exist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_type);
          this->__isset.app_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t create_app_options::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("create_app_options");

  xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->partition_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replica_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->replica_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("success_if_exist", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->success_if_exist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->app_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(create_app_options &a, create_app_options &b) {
  using ::std::swap;
  swap(a.partition_count, b.partition_count);
  swap(a.replica_count, b.replica_count);
  swap(a.success_if_exist, b.success_if_exist);
  swap(a.app_type, b.app_type);
  swap(a.__isset, b.__isset);
}

create_app_options::create_app_options(const create_app_options& other130) {
  partition_count = other130.partition_count;
  replica_count = other130.replica_count;
  success_if_exist = other130.success_if_exist;
  app_type = other130.app_type;
  __isset = other130.__isset;
}
create_app_options::create_app_options( create_app_options&& other131) {
  partition_count = std::move(other131.partition_count);
  replica_count = std::move(other131.replica_count);
  success_if_exist = std::move(other131.success_if_exist);
  app_type = std::move(other131.app_type);
  __isset = std::move(other131.__isset);
}
create_app_options& create_app_options::operator=(const create_app_options& other132) {
  partition_count = other132.partition_count;
  replica_count = other132.replica_count;
  success_if_exist = other132.success_if_exist;
  app_type = other132.app_type;
  __isset = other132.__isset;
  return *this;
}
create_app_options& create_app_options::operator=(create_app_options&& other133) {
  partition_count = std::move(other133.partition_count);
  replica_count = std::move(other133.replica_count);
  success_if_exist = std::move(other133.success_if_exist);
  app_type = std::move(other133.app_type);
  __isset = std::move(other133.__isset);
  return *this;
}
void create_app_options::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "create_app_options(";
  out << "partition_count=" << to_string(partition_count);
  out << ", " << "replica_count=" << to_string(replica_count);
  out << ", " << "success_if_exist=" << to_string(success_if_exist);
  out << ", " << "app_type=" << to_string(app_type);
  out << ")";
}


configuration_create_app_request::~configuration_create_app_request() throw() {
}


void configuration_create_app_request::__set_app_name(const std::string& val) {
  this->app_name = val;
}

void configuration_create_app_request::__set_options(const create_app_options& val) {
  this->options = val;
}

uint32_t configuration_create_app_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->options.read(iprot);
          this->__isset.options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_create_app_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_create_app_request");

  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->options.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_create_app_request &a, configuration_create_app_request &b) {
  using ::std::swap;
  swap(a.app_name, b.app_name);
  swap(a.options, b.options);
  swap(a.__isset, b.__isset);
}

configuration_create_app_request::configuration_create_app_request(const configuration_create_app_request& other134) {
  app_name = other134.app_name;
  options = other134.options;
  __isset = other134.__isset;
}
configuration_create_app_request::configuration_create_app_request( configuration_create_app_request&& other135) {
  app_name = std::move(other135.app_name);
  options = std::move(other135.options);
  __isset = std::move(other135.__isset);
}
configuration_create_app_request& configuration_create_app_request::operator=(const configuration_create_app_request& other136) {
  app_name = other136.app_name;
  options = other136.options;
  __isset = other136.__isset;
  return *this;
}
configuration_create_app_request& configuration_create_app_request::operator=(configuration_create_app_request&& other137) {
  app_name = std::move(other137.app_name);
  options = std::move(other137.options);
  __isset = std::move(other137.__isset);
  return *this;
}
void configuration_create_app_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_create_app_request(";
  out << "app_name=" << to_string(app_name);
  out << ", " << "options=" << to_string(options);
  out << ")";
}


drop_app_options::~drop_app_options() throw() {
}


void drop_app_options::__set_success_if_not_exist(const bool val) {
  this->success_if_not_exist = val;
}

uint32_t drop_app_options::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success_if_not_exist);
          this->__isset.success_if_not_exist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t drop_app_options::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("drop_app_options");

  xfer += oprot->writeFieldBegin("success_if_not_exist", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success_if_not_exist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(drop_app_options &a, drop_app_options &b) {
  using ::std::swap;
  swap(a.success_if_not_exist, b.success_if_not_exist);
  swap(a.__isset, b.__isset);
}

drop_app_options::drop_app_options(const drop_app_options& other138) {
  success_if_not_exist = other138.success_if_not_exist;
  __isset = other138.__isset;
}
drop_app_options::drop_app_options( drop_app_options&& other139) {
  success_if_not_exist = std::move(other139.success_if_not_exist);
  __isset = std::move(other139.__isset);
}
drop_app_options& drop_app_options::operator=(const drop_app_options& other140) {
  success_if_not_exist = other140.success_if_not_exist;
  __isset = other140.__isset;
  return *this;
}
drop_app_options& drop_app_options::operator=(drop_app_options&& other141) {
  success_if_not_exist = std::move(other141.success_if_not_exist);
  __isset = std::move(other141.__isset);
  return *this;
}
void drop_app_options::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "drop_app_options(";
  out << "success_if_not_exist=" << to_string(success_if_not_exist);
  out << ")";
}


configuration_drop_app_request::~configuration_drop_app_request() throw() {
}


void configuration_drop_app_request::__set_app_name(const std::string& val) {
  this->app_name = val;
}

void configuration_drop_app_request::__set_options(const drop_app_options& val) {
  this->options = val;
}

uint32_t configuration_drop_app_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->options.read(iprot);
          this->__isset.options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_drop_app_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_drop_app_request");

  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->options.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_drop_app_request &a, configuration_drop_app_request &b) {
  using ::std::swap;
  swap(a.app_name, b.app_name);
  swap(a.options, b.options);
  swap(a.__isset, b.__isset);
}

configuration_drop_app_request::configuration_drop_app_request(const configuration_drop_app_request& other142) {
  app_name = other142.app_name;
  options = other142.options;
  __isset = other142.__isset;
}
configuration_drop_app_request::configuration_drop_app_request( configuration_drop_app_request&& other143) {
  app_name = std::move(other143.app_name);
  options = std::move(other143.options);
  __isset = std::move(other143.__isset);
}
configuration_drop_app_request& configuration_drop_app_request::operator=(const configuration_drop_app_request& other144) {
  app_name = other144.app_name;
  options = other144.options;
  __isset = other144.__isset;
  return *this;
}
configuration_drop_app_request& configuration_drop_app_request::operator=(configuration_drop_app_request&& other145) {
  app_name = std::move(other145.app_name);
  options = std::move(other145.options);
  __isset = std::move(other145.__isset);
  return *this;
}
void configuration_drop_app_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_drop_app_request(";
  out << "app_name=" << to_string(app_name);
  out << ", " << "options=" << to_string(options);
  out << ")";
}


configuration_list_apps_request::~configuration_list_apps_request() throw() {
}


void configuration_list_apps_request::__set_status(const app_status val) {
  this->status = val;
}

uint32_t configuration_list_apps_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast146;
          xfer += iprot->readI32(ecast146);
          this->status = (app_status)ecast146;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_list_apps_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_list_apps_request");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_list_apps_request &a, configuration_list_apps_request &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

configuration_list_apps_request::configuration_list_apps_request(const configuration_list_apps_request& other147) {
  status = other147.status;
  __isset = other147.__isset;
}
configuration_list_apps_request::configuration_list_apps_request( configuration_list_apps_request&& other148) {
  status = std::move(other148.status);
  __isset = std::move(other148.__isset);
}
configuration_list_apps_request& configuration_list_apps_request::operator=(const configuration_list_apps_request& other149) {
  status = other149.status;
  __isset = other149.__isset;
  return *this;
}
configuration_list_apps_request& configuration_list_apps_request::operator=(configuration_list_apps_request&& other150) {
  status = std::move(other150.status);
  __isset = std::move(other150.__isset);
  return *this;
}
void configuration_list_apps_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_list_apps_request(";
  out << "status=" << to_string(status);
  out << ")";
}


configuration_list_nodes_request::~configuration_list_nodes_request() throw() {
}


void configuration_list_nodes_request::__set_status(const node_status val) {
  this->status = val;
}

uint32_t configuration_list_nodes_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast151;
          xfer += iprot->readI32(ecast151);
          this->status = (node_status)ecast151;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_list_nodes_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_list_nodes_request");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_list_nodes_request &a, configuration_list_nodes_request &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

configuration_list_nodes_request::configuration_list_nodes_request(const configuration_list_nodes_request& other152) {
  status = other152.status;
  __isset = other152.__isset;
}
configuration_list_nodes_request::configuration_list_nodes_request( configuration_list_nodes_request&& other153) {
  status = std::move(other153.status);
  __isset = std::move(other153.__isset);
}
configuration_list_nodes_request& configuration_list_nodes_request::operator=(const configuration_list_nodes_request& other154) {
  status = other154.status;
  __isset = other154.__isset;
  return *this;
}
configuration_list_nodes_request& configuration_list_nodes_request::operator=(configuration_list_nodes_request&& other155) {
  status = std::move(other155.status);
  __isset = std::move(other155.__isset);
  return *this;
}
void configuration_list_nodes_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_list_nodes_request(";
  out << "status=" << to_string(status);
  out << ")";
}


configuration_create_app_response::~configuration_create_app_response() throw() {
}


void configuration_create_app_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void configuration_create_app_response::__set_appid(const int32_t val) {
  this->appid = val;
}

uint32_t configuration_create_app_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appid);
          this->__isset.appid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_create_app_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_create_app_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->appid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_create_app_response &a, configuration_create_app_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.appid, b.appid);
  swap(a.__isset, b.__isset);
}

configuration_create_app_response::configuration_create_app_response(const configuration_create_app_response& other156) {
  err = other156.err;
  appid = other156.appid;
  __isset = other156.__isset;
}
configuration_create_app_response::configuration_create_app_response( configuration_create_app_response&& other157) {
  err = std::move(other157.err);
  appid = std::move(other157.appid);
  __isset = std::move(other157.__isset);
}
configuration_create_app_response& configuration_create_app_response::operator=(const configuration_create_app_response& other158) {
  err = other158.err;
  appid = other158.appid;
  __isset = other158.__isset;
  return *this;
}
configuration_create_app_response& configuration_create_app_response::operator=(configuration_create_app_response&& other159) {
  err = std::move(other159.err);
  appid = std::move(other159.appid);
  __isset = std::move(other159.__isset);
  return *this;
}
void configuration_create_app_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_create_app_response(";
  out << "err=" << to_string(err);
  out << ", " << "appid=" << to_string(appid);
  out << ")";
}


control_balancer_migration_request::~control_balancer_migration_request() throw() {
}


void control_balancer_migration_request::__set_enable_migration(const bool val) {
  this->enable_migration = val;
}

uint32_t control_balancer_migration_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_migration);
          this->__isset.enable_migration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t control_balancer_migration_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("control_balancer_migration_request");

  xfer += oprot->writeFieldBegin("enable_migration", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable_migration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(control_balancer_migration_request &a, control_balancer_migration_request &b) {
  using ::std::swap;
  swap(a.enable_migration, b.enable_migration);
  swap(a.__isset, b.__isset);
}

control_balancer_migration_request::control_balancer_migration_request(const control_balancer_migration_request& other160) {
  enable_migration = other160.enable_migration;
  __isset = other160.__isset;
}
control_balancer_migration_request::control_balancer_migration_request( control_balancer_migration_request&& other161) {
  enable_migration = std::move(other161.enable_migration);
  __isset = std::move(other161.__isset);
}
control_balancer_migration_request& control_balancer_migration_request::operator=(const control_balancer_migration_request& other162) {
  enable_migration = other162.enable_migration;
  __isset = other162.__isset;
  return *this;
}
control_balancer_migration_request& control_balancer_migration_request::operator=(control_balancer_migration_request&& other163) {
  enable_migration = std::move(other163.enable_migration);
  __isset = std::move(other163.__isset);
  return *this;
}
void control_balancer_migration_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "control_balancer_migration_request(";
  out << "enable_migration=" << to_string(enable_migration);
  out << ")";
}


control_balancer_migration_response::~control_balancer_migration_response() throw() {
}


void control_balancer_migration_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

uint32_t control_balancer_migration_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t control_balancer_migration_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("control_balancer_migration_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(control_balancer_migration_response &a, control_balancer_migration_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.__isset, b.__isset);
}

control_balancer_migration_response::control_balancer_migration_response(const control_balancer_migration_response& other164) {
  err = other164.err;
  __isset = other164.__isset;
}
control_balancer_migration_response::control_balancer_migration_response( control_balancer_migration_response&& other165) {
  err = std::move(other165.err);
  __isset = std::move(other165.__isset);
}
control_balancer_migration_response& control_balancer_migration_response::operator=(const control_balancer_migration_response& other166) {
  err = other166.err;
  __isset = other166.__isset;
  return *this;
}
control_balancer_migration_response& control_balancer_migration_response::operator=(control_balancer_migration_response&& other167) {
  err = std::move(other167.err);
  __isset = std::move(other167.__isset);
  return *this;
}
void control_balancer_migration_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "control_balancer_migration_response(";
  out << "err=" << to_string(err);
  out << ")";
}


balancer_proposal_request::~balancer_proposal_request() throw() {
}


void balancer_proposal_request::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void balancer_proposal_request::__set_type(const balancer_type val) {
  this->type = val;
}

void balancer_proposal_request::__set_from_addr(const  ::dsn::rpc_address& val) {
  this->from_addr = val;
}

void balancer_proposal_request::__set_to_addr(const  ::dsn::rpc_address& val) {
  this->to_addr = val;
}

uint32_t balancer_proposal_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast168;
          xfer += iprot->readI32(ecast168);
          this->type = (balancer_type)ecast168;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->from_addr.read(iprot);
          this->__isset.from_addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->to_addr.read(iprot);
          this->__isset.to_addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t balancer_proposal_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("balancer_proposal_request");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_addr", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->from_addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_addr", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->to_addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(balancer_proposal_request &a, balancer_proposal_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.type, b.type);
  swap(a.from_addr, b.from_addr);
  swap(a.to_addr, b.to_addr);
  swap(a.__isset, b.__isset);
}

balancer_proposal_request::balancer_proposal_request(const balancer_proposal_request& other169) {
  gpid = other169.gpid;
  type = other169.type;
  from_addr = other169.from_addr;
  to_addr = other169.to_addr;
  __isset = other169.__isset;
}
balancer_proposal_request::balancer_proposal_request( balancer_proposal_request&& other170) {
  gpid = std::move(other170.gpid);
  type = std::move(other170.type);
  from_addr = std::move(other170.from_addr);
  to_addr = std::move(other170.to_addr);
  __isset = std::move(other170.__isset);
}
balancer_proposal_request& balancer_proposal_request::operator=(const balancer_proposal_request& other171) {
  gpid = other171.gpid;
  type = other171.type;
  from_addr = other171.from_addr;
  to_addr = other171.to_addr;
  __isset = other171.__isset;
  return *this;
}
balancer_proposal_request& balancer_proposal_request::operator=(balancer_proposal_request&& other172) {
  gpid = std::move(other172.gpid);
  type = std::move(other172.type);
  from_addr = std::move(other172.from_addr);
  to_addr = std::move(other172.to_addr);
  __isset = std::move(other172.__isset);
  return *this;
}
void balancer_proposal_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "balancer_proposal_request(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "type=" << to_string(type);
  out << ", " << "from_addr=" << to_string(from_addr);
  out << ", " << "to_addr=" << to_string(to_addr);
  out << ")";
}


balancer_proposal_response::~balancer_proposal_response() throw() {
}


void balancer_proposal_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

uint32_t balancer_proposal_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t balancer_proposal_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("balancer_proposal_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(balancer_proposal_response &a, balancer_proposal_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.__isset, b.__isset);
}

balancer_proposal_response::balancer_proposal_response(const balancer_proposal_response& other173) {
  err = other173.err;
  __isset = other173.__isset;
}
balancer_proposal_response::balancer_proposal_response( balancer_proposal_response&& other174) {
  err = std::move(other174.err);
  __isset = std::move(other174.__isset);
}
balancer_proposal_response& balancer_proposal_response::operator=(const balancer_proposal_response& other175) {
  err = other175.err;
  __isset = other175.__isset;
  return *this;
}
balancer_proposal_response& balancer_proposal_response::operator=(balancer_proposal_response&& other176) {
  err = std::move(other176.err);
  __isset = std::move(other176.__isset);
  return *this;
}
void balancer_proposal_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "balancer_proposal_response(";
  out << "err=" << to_string(err);
  out << ")";
}


configuration_drop_app_response::~configuration_drop_app_response() throw() {
}


void configuration_drop_app_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

uint32_t configuration_drop_app_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_drop_app_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_drop_app_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_drop_app_response &a, configuration_drop_app_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.__isset, b.__isset);
}

configuration_drop_app_response::configuration_drop_app_response(const configuration_drop_app_response& other177) {
  err = other177.err;
  __isset = other177.__isset;
}
configuration_drop_app_response::configuration_drop_app_response( configuration_drop_app_response&& other178) {
  err = std::move(other178.err);
  __isset = std::move(other178.__isset);
}
configuration_drop_app_response& configuration_drop_app_response::operator=(const configuration_drop_app_response& other179) {
  err = other179.err;
  __isset = other179.__isset;
  return *this;
}
configuration_drop_app_response& configuration_drop_app_response::operator=(configuration_drop_app_response&& other180) {
  err = std::move(other180.err);
  __isset = std::move(other180.__isset);
  return *this;
}
void configuration_drop_app_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_drop_app_response(";
  out << "err=" << to_string(err);
  out << ")";
}


configuration_list_apps_response::~configuration_list_apps_response() throw() {
}


void configuration_list_apps_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void configuration_list_apps_response::__set_infos(const std::vector<app_info> & val) {
  this->infos = val;
}

uint32_t configuration_list_apps_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->infos.clear();
            uint32_t _size181;
            ::apache::thrift::protocol::TType _etype184;
            xfer += iprot->readListBegin(_etype184, _size181);
            this->infos.resize(_size181);
            uint32_t _i185;
            for (_i185 = 0; _i185 < _size181; ++_i185)
            {
              xfer += this->infos[_i185].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_list_apps_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_list_apps_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->infos.size()));
    std::vector<app_info> ::const_iterator _iter186;
    for (_iter186 = this->infos.begin(); _iter186 != this->infos.end(); ++_iter186)
    {
      xfer += (*_iter186).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_list_apps_response &a, configuration_list_apps_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.infos, b.infos);
  swap(a.__isset, b.__isset);
}

configuration_list_apps_response::configuration_list_apps_response(const configuration_list_apps_response& other187) {
  err = other187.err;
  infos = other187.infos;
  __isset = other187.__isset;
}
configuration_list_apps_response::configuration_list_apps_response( configuration_list_apps_response&& other188) {
  err = std::move(other188.err);
  infos = std::move(other188.infos);
  __isset = std::move(other188.__isset);
}
configuration_list_apps_response& configuration_list_apps_response::operator=(const configuration_list_apps_response& other189) {
  err = other189.err;
  infos = other189.infos;
  __isset = other189.__isset;
  return *this;
}
configuration_list_apps_response& configuration_list_apps_response::operator=(configuration_list_apps_response&& other190) {
  err = std::move(other190.err);
  infos = std::move(other190.infos);
  __isset = std::move(other190.__isset);
  return *this;
}
void configuration_list_apps_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_list_apps_response(";
  out << "err=" << to_string(err);
  out << ", " << "infos=" << to_string(infos);
  out << ")";
}


configuration_list_nodes_response::~configuration_list_nodes_response() throw() {
}


void configuration_list_nodes_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void configuration_list_nodes_response::__set_infos(const std::vector<node_info> & val) {
  this->infos = val;
}

uint32_t configuration_list_nodes_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->infos.clear();
            uint32_t _size191;
            ::apache::thrift::protocol::TType _etype194;
            xfer += iprot->readListBegin(_etype194, _size191);
            this->infos.resize(_size191);
            uint32_t _i195;
            for (_i195 = 0; _i195 < _size191; ++_i195)
            {
              xfer += this->infos[_i195].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_list_nodes_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_list_nodes_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->infos.size()));
    std::vector<node_info> ::const_iterator _iter196;
    for (_iter196 = this->infos.begin(); _iter196 != this->infos.end(); ++_iter196)
    {
      xfer += (*_iter196).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_list_nodes_response &a, configuration_list_nodes_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.infos, b.infos);
  swap(a.__isset, b.__isset);
}

configuration_list_nodes_response::configuration_list_nodes_response(const configuration_list_nodes_response& other197) {
  err = other197.err;
  infos = other197.infos;
  __isset = other197.__isset;
}
configuration_list_nodes_response::configuration_list_nodes_response( configuration_list_nodes_response&& other198) {
  err = std::move(other198.err);
  infos = std::move(other198.infos);
  __isset = std::move(other198.__isset);
}
configuration_list_nodes_response& configuration_list_nodes_response::operator=(const configuration_list_nodes_response& other199) {
  err = other199.err;
  infos = other199.infos;
  __isset = other199.__isset;
  return *this;
}
configuration_list_nodes_response& configuration_list_nodes_response::operator=(configuration_list_nodes_response&& other200) {
  err = std::move(other200.err);
  infos = std::move(other200.infos);
  __isset = std::move(other200.__isset);
  return *this;
}
void configuration_list_nodes_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_list_nodes_response(";
  out << "err=" << to_string(err);
  out << ", " << "infos=" << to_string(infos);
  out << ")";
}


configuration_query_by_node_response::~configuration_query_by_node_response() throw() {
}


void configuration_query_by_node_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void configuration_query_by_node_response::__set_partitions(const std::vector<partition_configuration> & val) {
  this->partitions = val;
}

uint32_t configuration_query_by_node_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size201;
            ::apache::thrift::protocol::TType _etype204;
            xfer += iprot->readListBegin(_etype204, _size201);
            this->partitions.resize(_size201);
            uint32_t _i205;
            for (_i205 = 0; _i205 < _size201; ++_i205)
            {
              xfer += this->partitions[_i205].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_query_by_node_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_query_by_node_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<partition_configuration> ::const_iterator _iter206;
    for (_iter206 = this->partitions.begin(); _iter206 != this->partitions.end(); ++_iter206)
    {
      xfer += (*_iter206).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_query_by_node_response &a, configuration_query_by_node_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

configuration_query_by_node_response::configuration_query_by_node_response(const configuration_query_by_node_response& other207) {
  err = other207.err;
  partitions = other207.partitions;
  __isset = other207.__isset;
}
configuration_query_by_node_response::configuration_query_by_node_response( configuration_query_by_node_response&& other208) {
  err = std::move(other208.err);
  partitions = std::move(other208.partitions);
  __isset = std::move(other208.__isset);
}
configuration_query_by_node_response& configuration_query_by_node_response::operator=(const configuration_query_by_node_response& other209) {
  err = other209.err;
  partitions = other209.partitions;
  __isset = other209.__isset;
  return *this;
}
configuration_query_by_node_response& configuration_query_by_node_response::operator=(configuration_query_by_node_response&& other210) {
  err = std::move(other210.err);
  partitions = std::move(other210.partitions);
  __isset = std::move(other210.__isset);
  return *this;
}
void configuration_query_by_node_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_query_by_node_response(";
  out << "err=" << to_string(err);
  out << ", " << "partitions=" << to_string(partitions);
  out << ")";
}


configuration_query_by_index_request::~configuration_query_by_index_request() throw() {
}


void configuration_query_by_index_request::__set_app_name(const std::string& val) {
  this->app_name = val;
}

void configuration_query_by_index_request::__set_partition_indices(const std::vector<int32_t> & val) {
  this->partition_indices = val;
}

uint32_t configuration_query_by_index_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_indices.clear();
            uint32_t _size211;
            ::apache::thrift::protocol::TType _etype214;
            xfer += iprot->readListBegin(_etype214, _size211);
            this->partition_indices.resize(_size211);
            uint32_t _i215;
            for (_i215 = 0; _i215 < _size211; ++_i215)
            {
              xfer += iprot->readI32(this->partition_indices[_i215]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partition_indices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_query_by_index_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_query_by_index_request");

  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partition_indices", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->partition_indices.size()));
    std::vector<int32_t> ::const_iterator _iter216;
    for (_iter216 = this->partition_indices.begin(); _iter216 != this->partition_indices.end(); ++_iter216)
    {
      xfer += oprot->writeI32((*_iter216));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_query_by_index_request &a, configuration_query_by_index_request &b) {
  using ::std::swap;
  swap(a.app_name, b.app_name);
  swap(a.partition_indices, b.partition_indices);
  swap(a.__isset, b.__isset);
}

configuration_query_by_index_request::configuration_query_by_index_request(const configuration_query_by_index_request& other217) {
  app_name = other217.app_name;
  partition_indices = other217.partition_indices;
  __isset = other217.__isset;
}
configuration_query_by_index_request::configuration_query_by_index_request( configuration_query_by_index_request&& other218) {
  app_name = std::move(other218.app_name);
  partition_indices = std::move(other218.partition_indices);
  __isset = std::move(other218.__isset);
}
configuration_query_by_index_request& configuration_query_by_index_request::operator=(const configuration_query_by_index_request& other219) {
  app_name = other219.app_name;
  partition_indices = other219.partition_indices;
  __isset = other219.__isset;
  return *this;
}
configuration_query_by_index_request& configuration_query_by_index_request::operator=(configuration_query_by_index_request&& other220) {
  app_name = std::move(other220.app_name);
  partition_indices = std::move(other220.partition_indices);
  __isset = std::move(other220.__isset);
  return *this;
}
void configuration_query_by_index_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_query_by_index_request(";
  out << "app_name=" << to_string(app_name);
  out << ", " << "partition_indices=" << to_string(partition_indices);
  out << ")";
}


configuration_query_by_index_response::~configuration_query_by_index_response() throw() {
}


void configuration_query_by_index_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void configuration_query_by_index_response::__set_app_id(const int32_t val) {
  this->app_id = val;
}

void configuration_query_by_index_response::__set_partition_count(const int32_t val) {
  this->partition_count = val;
}

void configuration_query_by_index_response::__set_partitions(const std::vector<partition_configuration> & val) {
  this->partitions = val;
}

uint32_t configuration_query_by_index_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partition_count);
          this->__isset.partition_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size221;
            ::apache::thrift::protocol::TType _etype224;
            xfer += iprot->readListBegin(_etype224, _size221);
            this->partitions.resize(_size221);
            uint32_t _i225;
            for (_i225 = 0; _i225 < _size221; ++_i225)
            {
              xfer += this->partitions[_i225].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t configuration_query_by_index_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("configuration_query_by_index_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->partition_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<partition_configuration> ::const_iterator _iter226;
    for (_iter226 = this->partitions.begin(); _iter226 != this->partitions.end(); ++_iter226)
    {
      xfer += (*_iter226).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(configuration_query_by_index_response &a, configuration_query_by_index_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.app_id, b.app_id);
  swap(a.partition_count, b.partition_count);
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

configuration_query_by_index_response::configuration_query_by_index_response(const configuration_query_by_index_response& other227) {
  err = other227.err;
  app_id = other227.app_id;
  partition_count = other227.partition_count;
  partitions = other227.partitions;
  __isset = other227.__isset;
}
configuration_query_by_index_response::configuration_query_by_index_response( configuration_query_by_index_response&& other228) {
  err = std::move(other228.err);
  app_id = std::move(other228.app_id);
  partition_count = std::move(other228.partition_count);
  partitions = std::move(other228.partitions);
  __isset = std::move(other228.__isset);
}
configuration_query_by_index_response& configuration_query_by_index_response::operator=(const configuration_query_by_index_response& other229) {
  err = other229.err;
  app_id = other229.app_id;
  partition_count = other229.partition_count;
  partitions = other229.partitions;
  __isset = other229.__isset;
  return *this;
}
configuration_query_by_index_response& configuration_query_by_index_response::operator=(configuration_query_by_index_response&& other230) {
  err = std::move(other230.err);
  app_id = std::move(other230.app_id);
  partition_count = std::move(other230.partition_count);
  partitions = std::move(other230.partitions);
  __isset = std::move(other230.__isset);
  return *this;
}
void configuration_query_by_index_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "configuration_query_by_index_response(";
  out << "err=" << to_string(err);
  out << ", " << "app_id=" << to_string(app_id);
  out << ", " << "partition_count=" << to_string(partition_count);
  out << ", " << "partitions=" << to_string(partitions);
  out << ")";
}


query_replica_decree_request::~query_replica_decree_request() throw() {
}


void query_replica_decree_request::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void query_replica_decree_request::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

uint32_t query_replica_decree_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t query_replica_decree_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("query_replica_decree_request");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(query_replica_decree_request &a, query_replica_decree_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

query_replica_decree_request::query_replica_decree_request(const query_replica_decree_request& other231) {
  gpid = other231.gpid;
  node = other231.node;
  __isset = other231.__isset;
}
query_replica_decree_request::query_replica_decree_request( query_replica_decree_request&& other232) {
  gpid = std::move(other232.gpid);
  node = std::move(other232.node);
  __isset = std::move(other232.__isset);
}
query_replica_decree_request& query_replica_decree_request::operator=(const query_replica_decree_request& other233) {
  gpid = other233.gpid;
  node = other233.node;
  __isset = other233.__isset;
  return *this;
}
query_replica_decree_request& query_replica_decree_request::operator=(query_replica_decree_request&& other234) {
  gpid = std::move(other234.gpid);
  node = std::move(other234.node);
  __isset = std::move(other234.__isset);
  return *this;
}
void query_replica_decree_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "query_replica_decree_request(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "node=" << to_string(node);
  out << ")";
}


query_replica_decree_response::~query_replica_decree_response() throw() {
}


void query_replica_decree_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void query_replica_decree_response::__set_last_decree(const int64_t val) {
  this->last_decree = val;
}

uint32_t query_replica_decree_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_decree);
          this->__isset.last_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t query_replica_decree_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("query_replica_decree_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_decree", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->last_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(query_replica_decree_response &a, query_replica_decree_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.last_decree, b.last_decree);
  swap(a.__isset, b.__isset);
}

query_replica_decree_response::query_replica_decree_response(const query_replica_decree_response& other235) {
  err = other235.err;
  last_decree = other235.last_decree;
  __isset = other235.__isset;
}
query_replica_decree_response::query_replica_decree_response( query_replica_decree_response&& other236) {
  err = std::move(other236.err);
  last_decree = std::move(other236.last_decree);
  __isset = std::move(other236.__isset);
}
query_replica_decree_response& query_replica_decree_response::operator=(const query_replica_decree_response& other237) {
  err = other237.err;
  last_decree = other237.last_decree;
  __isset = other237.__isset;
  return *this;
}
query_replica_decree_response& query_replica_decree_response::operator=(query_replica_decree_response&& other238) {
  err = std::move(other238.err);
  last_decree = std::move(other238.last_decree);
  __isset = std::move(other238.__isset);
  return *this;
}
void query_replica_decree_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "query_replica_decree_response(";
  out << "err=" << to_string(err);
  out << ", " << "last_decree=" << to_string(last_decree);
  out << ")";
}


replica_info::~replica_info() throw() {
}


void replica_info::__set_gpid(const global_partition_id& val) {
  this->gpid = val;
}

void replica_info::__set_ballot(const int64_t val) {
  this->ballot = val;
}

void replica_info::__set_status(const partition_status val) {
  this->status = val;
}

void replica_info::__set_last_committed_decree(const int64_t val) {
  this->last_committed_decree = val;
}

void replica_info::__set_last_prepared_decree(const int64_t val) {
  this->last_prepared_decree = val;
}

void replica_info::__set_last_durable_decree(const int64_t val) {
  this->last_durable_decree = val;
}

uint32_t replica_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gpid.read(iprot);
          this->__isset.gpid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ballot);
          this->__isset.ballot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast239;
          xfer += iprot->readI32(ecast239);
          this->status = (partition_status)ecast239;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_committed_decree);
          this->__isset.last_committed_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_prepared_decree);
          this->__isset.last_prepared_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_durable_decree);
          this->__isset.last_durable_decree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t replica_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("replica_info");

  xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gpid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ballot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->last_committed_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_prepared_decree", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->last_prepared_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_durable_decree", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->last_durable_decree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(replica_info &a, replica_info &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.status, b.status);
  swap(a.last_committed_decree, b.last_committed_decree);
  swap(a.last_prepared_decree, b.last_prepared_decree);
  swap(a.last_durable_decree, b.last_durable_decree);
  swap(a.__isset, b.__isset);
}

replica_info::replica_info(const replica_info& other240) {
  gpid = other240.gpid;
  ballot = other240.ballot;
  status = other240.status;
  last_committed_decree = other240.last_committed_decree;
  last_prepared_decree = other240.last_prepared_decree;
  last_durable_decree = other240.last_durable_decree;
  __isset = other240.__isset;
}
replica_info::replica_info( replica_info&& other241) {
  gpid = std::move(other241.gpid);
  ballot = std::move(other241.ballot);
  status = std::move(other241.status);
  last_committed_decree = std::move(other241.last_committed_decree);
  last_prepared_decree = std::move(other241.last_prepared_decree);
  last_durable_decree = std::move(other241.last_durable_decree);
  __isset = std::move(other241.__isset);
}
replica_info& replica_info::operator=(const replica_info& other242) {
  gpid = other242.gpid;
  ballot = other242.ballot;
  status = other242.status;
  last_committed_decree = other242.last_committed_decree;
  last_prepared_decree = other242.last_prepared_decree;
  last_durable_decree = other242.last_durable_decree;
  __isset = other242.__isset;
  return *this;
}
replica_info& replica_info::operator=(replica_info&& other243) {
  gpid = std::move(other243.gpid);
  ballot = std::move(other243.ballot);
  status = std::move(other243.status);
  last_committed_decree = std::move(other243.last_committed_decree);
  last_prepared_decree = std::move(other243.last_prepared_decree);
  last_durable_decree = std::move(other243.last_durable_decree);
  __isset = std::move(other243.__isset);
  return *this;
}
void replica_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "replica_info(";
  out << "gpid=" << to_string(gpid);
  out << ", " << "ballot=" << to_string(ballot);
  out << ", " << "status=" << to_string(status);
  out << ", " << "last_committed_decree=" << to_string(last_committed_decree);
  out << ", " << "last_prepared_decree=" << to_string(last_prepared_decree);
  out << ", " << "last_durable_decree=" << to_string(last_durable_decree);
  out << ")";
}


query_replica_info_request::~query_replica_info_request() throw() {
}


void query_replica_info_request::__set_node(const  ::dsn::rpc_address& val) {
  this->node = val;
}

uint32_t query_replica_info_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t query_replica_info_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("query_replica_info_request");

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(query_replica_info_request &a, query_replica_info_request &b) {
  using ::std::swap;
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

query_replica_info_request::query_replica_info_request(const query_replica_info_request& other244) {
  node = other244.node;
  __isset = other244.__isset;
}
query_replica_info_request::query_replica_info_request( query_replica_info_request&& other245) {
  node = std::move(other245.node);
  __isset = std::move(other245.__isset);
}
query_replica_info_request& query_replica_info_request::operator=(const query_replica_info_request& other246) {
  node = other246.node;
  __isset = other246.__isset;
  return *this;
}
query_replica_info_request& query_replica_info_request::operator=(query_replica_info_request&& other247) {
  node = std::move(other247.node);
  __isset = std::move(other247.__isset);
  return *this;
}
void query_replica_info_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "query_replica_info_request(";
  out << "node=" << to_string(node);
  out << ")";
}


query_replica_info_response::~query_replica_info_response() throw() {
}


void query_replica_info_response::__set_err(const  ::dsn::error_code& val) {
  this->err = val;
}

void query_replica_info_response::__set_replicas(const std::vector<replica_info> & val) {
  this->replicas = val;
}

uint32_t query_replica_info_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->err.read(iprot);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->replicas.clear();
            uint32_t _size248;
            ::apache::thrift::protocol::TType _etype251;
            xfer += iprot->readListBegin(_etype251, _size248);
            this->replicas.resize(_size248);
            uint32_t _i252;
            for (_i252 = 0; _i252 < _size248; ++_i252)
            {
              xfer += this->replicas[_i252].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.replicas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t query_replica_info_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("query_replica_info_response");

  xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->err.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replicas", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->replicas.size()));
    std::vector<replica_info> ::const_iterator _iter253;
    for (_iter253 = this->replicas.begin(); _iter253 != this->replicas.end(); ++_iter253)
    {
      xfer += (*_iter253).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(query_replica_info_response &a, query_replica_info_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.replicas, b.replicas);
  swap(a.__isset, b.__isset);
}

query_replica_info_response::query_replica_info_response(const query_replica_info_response& other254) {
  err = other254.err;
  replicas = other254.replicas;
  __isset = other254.__isset;
}
query_replica_info_response::query_replica_info_response( query_replica_info_response&& other255) {
  err = std::move(other255.err);
  replicas = std::move(other255.replicas);
  __isset = std::move(other255.__isset);
}
query_replica_info_response& query_replica_info_response::operator=(const query_replica_info_response& other256) {
  err = other256.err;
  replicas = other256.replicas;
  __isset = other256.__isset;
  return *this;
}
query_replica_info_response& query_replica_info_response::operator=(query_replica_info_response&& other257) {
  err = std::move(other257.err);
  replicas = std::move(other257.replicas);
  __isset = std::move(other257.__isset);
  return *this;
}
void query_replica_info_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "query_replica_info_response(";
  out << "err=" << to_string(err);
  out << ", " << "replicas=" << to_string(replicas);
  out << ")";
}

}} // namespace
#endif
